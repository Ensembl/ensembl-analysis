#!/usr/local/ensembl/bin/perl -w 

=head1 NAME

ensembl-analysis/scripts/Funcgen/test_RunnableDB

=head1 SYNOPSIS

this script will test a standard Funcgen runnabledb

=head1 DESCRIPTION

The script requires the module the analysis specified or that is specified on
the commandline with the perl path given the instantiates a copy with the 
standard arguments and calls the two standard methods fetch_input and run
if the -write option is specified the results will be written back to the
database with the method write_output. As standard it expects the modules
to live in Bio/EnsEMBL/Analysis/RunnableDB but you can change this on the 
commandline

=head1 OPTIONS

    -dbhost    host name for database (gets put as host= in locator)

    -dbport    For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (user= in locator)

    -dbpass    For RDBs, what password to use (pass= in locator)

    -help      prints out the perl docs

    -input_id  the input_id needed to fetch appropriate input for the 
               analysis

    -logic_name the name of the analysis to be run

    -check     a flag to just run the script as a pre exec check

    -write     a flag to indicate to write the results to the database

    -verbose   switches on print statements

    -module    which runnabledb you want run (again this is only needed if
               the analysis isnt already in the database)

    -runnabledb_path the path to the runnabledb you want required so perl
                     can find it in its perl5lib

    -utils_verbosity the amount of chat you want from the 
                     Bio::EnsEMBL::Utils::Exception module. Allowed parameters
                     are ALL INFO DEPRECATE WARNING EXCEPTION and OFF

    -logger_verbosity the amount of chat you want from the 
                      Bio::EnsEMBL::Analysis::Tools::Logger module. Allowed parameters
                      are ALL INFO_STACK_TRACE INFO and OFF

=head1 EXAMPLES

test_RunnableDB -dbhost=ens-genomics1 -dbport=3306 -dbname=sg_homo_sapiens_funcgen_44_36f 
  -dbuser=ensadmin -dbpass=ensembl -input_id chromosome:NCBI36:X:1:5000:1 
  -logic_name Chipotle -module Chipotle -verbose -write

this commandline would run chipotle on chromosome:NCBI36:X:1:5000:1 
on the specified database

=cut

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;

use Bio::EnsEMBL::Funcgen::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Analysis;
use Bio::EnsEMBL::Utils::Exception qw(verbose throw warning info);
use Bio::EnsEMBL::Analysis::Tools::Logger qw(logger_verbosity logger_info);


$! = 1;

my $dbhost;
my $dbuser;
my $dbpass;
my $dbport = 3306;
my $dbname;
my $input_id;
my $logic_name;
my $check  = 0;
my $output_dir;
my $write = 0;
my $help = 0; 
my $verbose = 0;
my $module;
my $analysis;
my $perl_path = 'Bio/EnsEMBL/Analysis/RunnableDB/Funcgen';
my $utils_verbosity = 'WARNING'; #how verbose do you want the 
my $logger_verbosity = 'OFF'; #how verbose do you want the 
#Bio::EnsEMBL::Utils::Exceptions module to be by default it is set to
#WARNING as this gives warning and throws but not deprecates or infos

my @command_args = @ARGV;
&GetOptions( 
            'dbhost=s'      => \$dbhost,
            'dbname=s'      => \$dbname,
            'dbuser=s'      => \$dbuser,
            'dbpass=s'      => \$dbpass,
            'dbport=s'      => \$dbport,
            'input_id:s'  => \$input_id,
            'logic_name|analysis:s'  => \$logic_name,
            'check'       => \$check,
            'write!' => \$write,
            'help!' => \$help,
            'verbose!' => \$verbose,
            'module:s'    => \$module,
            'runnabledb_path:s' => \$perl_path,
            'utils_verbosity=s' => \$utils_verbosity,
            'logger_verbosity=s' => \$logger_verbosity,
           ) or ($help = 1);

$| = 1;

verbose($utils_verbosity);
logger_verbosity($logger_verbosity);

if($check ) {
  print STDERR "args: $dbhost : $dbuser : " . ($dbpass or '') . " : $dbname : $input_id : $logic_name\n";
  exit 0;
}

if(!$dbhost || !$dbuser || !$dbname || !$input_id || !$logic_name){
  $help = 1;
}

&useage(\@command_args) if($help);


print STDERR "args: $dbhost : $dbuser : " . ($dbpass or '') . " : $dbname : $input_id : $logic_name\n" if($verbose);

my $db = Bio::EnsEMBL::Funcgen::DBSQL::DBAdaptor->new
    (
     -host   => $dbhost,
     -user   => $dbuser,
     -dbname => $dbname,
     -pass   => $dbpass,
     -port   => $dbport,
     -species => 'homo_sapiens',
     #-group => 'funcgen'
     );

die "No input id entered" unless defined ($input_id);

my $aa = $db->get_AnalysisAdaptor;
$analysis = $aa->fetch_by_logic_name($logic_name);

if(!$analysis){

  unless ($module) { 
     throw("The analysis with logic_name \"$logic_name\" is not stored".
           " in the database and the -module option wasn't used.\n". 
           "Either add the analysis to the db or use the -module flag".
           " to specify a module to use.\n".
           "( the analysis will be stored in the db if the features 
              are written)\n" ) ; 
            
   }



  print "Creating analysis object ".$logic_name." ".$module. "\n" if $verbose;

  print "This object will be stored in the database when the ".
    "features are written\n" if($verbose && $write);
  $analysis = Bio::EnsEMBL::Analysis->new
      (
       -logic_name => $logic_name,
       -module     => $module
       );
  
}
#print Dumper $analysis;

my ($runnable, $file);

if($analysis->module =~ "Bio::"){ 
  $runnable = $analysis->module; 
  ($file = $runnable) =~ s/::/\//g;
}else{
  $file = $perl_path."/".$analysis->module; 
  ($runnable = $file) =~ s/\//::/g;
}
eval{
  require "$file.pm";
};
if($@){
  throw("Couldn't require $file $@");
}
print STDERR "Creating runnable ".$file."\n" if($verbose);


$runnable =~ s/\//::/g;
print "Runnable: $runnable\n";
my $runobj = "$runnable"->new(-db    => $db,
                              -input_id => $input_id,
                              -analysis => $analysis,
                             );
print STDERR "Instantiated ".$runnable." runnabledb\n" if ($verbose);
$runobj->fetch_input;
print STDERR "Fetched input\n" if($verbose);
$runobj->run;# unless($runobj->input_is_void);
print STDERR "Run ".$runobj."\n" if($verbose);
print "Input is void not running\n" if($runobj->input_is_void);

if($write){
    $runobj->write_output;
    print STDERR "Written output\n" if($verbose);
} else {
    my @output = @{$runobj->output};
    print Dumper @output;
}

__END__

#$verbose = 1;
if($verbose){
  foreach my $out (@output) { 
    if ($out->isa("Bio::EnsEMBL::Gene")) {
      print_gene($out);
      print "\n";
    } else {
      #print $out->slice;
      my $name;
      if ($out->slice) {
        my @values = split /\:/, $out->slice;
        $name = $values[2];
      } else {
        $name = 'no_slice_name';
      }
      print_feature($out, $name, $logic_name);
    }
  }
}
print "There were ".@output." features found\n\n";


sub print_gene {
  my $out = shift;

  printf("%s\t$logic_name\tGene\t%d\t%d\t%s\n",
         $out->slice->seq_region_name,
         $out->start,
         $out->end,
         $out->strand);
  
  foreach my $tran (@{$out->get_all_Transcripts}) {
    printf("%s\t$logic_name\tTranscript\t%d\t%d\t%s\n",
           $out->slice->seq_region_name,
           $tran->start,
           $tran->end,
           $tran->strand);
    
    foreach my $exon (@{$tran->get_all_Exons}) {
      printf("%s\t$logic_name\tExon\t%d\t%d\t%s\t%d\t%d\n",
             $out->slice->seq_region_name,
             $exon->start,
             $exon->end,
             $exon->strand,
             $exon->phase, 
             $exon->end_phase);

      foreach my $ev (@{$exon->get_all_supporting_features}) {
        print_feature($ev, $out->slice->seq_region_name, $logic_name, "Supp_Feat");
      }
    }
  }
}


sub print_feature{
  my ($feature, $name, $source, $type) = @_;
  
  printf("%s\t%s\t%s\t%d\t%d\t%s\t%s\t%s",
         $name     ? $name     : "",
         $source   ? $source   : "", 
         $type     ? $type     : "", 
         $feature->start,
         $feature->end, 
         ($feature->can("score") ? ($feature->score ? $feature->score : 0) : 0) ,
         $feature->strand ? $feature->strand : ".", 
         ".");
  if ($feature->can("hseqname")) {
    printf("\t%s\t%d\t%d\t%s\t%.2f", 
           $feature->hseqname,
           $feature->hstart,
           $feature->hend,
           $feature->hstrand ? $feature->hstrand : ".",
           $feature->percent_id ? $feature->percent_id : 0);
  }
  print "\n";
           
}

sub useage{
  my ($command_args) = @_;
  print "Your commandline was :\n".
    "test_RunnableDB ".join("\t", @$command_args), "\n\n";
	exec('perldoc', $0);
	exit;
}


# POD documentation - main docs before the code

=pod

=head1 NAME

  test_RunnableDB

=head1 SYNOPSIS
 
  will run any runnableDB which will run as part of the pipeline

=head1 DESCRIPTION

  takes database arguments along with an input_id and an analysis object
  and will run the analysis


=head1 OPTIONS

    -dbhost      host name for database (gets put as host= in locator)
    -dbport      For RDBs, what port to connect to (port= in locator)
    -dbname    For RDBs, what name to connect to (dbname= in locator)
    -dbuser    For RDBs, what username to connect as (dbuser= in locator)
    -dbpass    For RDBs, what password to use (dbpass= in locator)
    -input_id  a input id for the analysis
    -logic_name  the logic_name of the analysis
    
     The above are all compulsory options you must provide them 
     otherwise the script won't work'
 
    -input_type the input id type
    -module the module to be run, this should either be a module which is
                present in Bio::Ensembl::Pipeline::RunnableDB or it 
                should be the full path

    These two options should be passed if your database doesn't already
    contain the analysis object you want to use, if the write flag is 
    switched on this analysis object will be stored in the database when
    the features are stored, note if you are using the pipeline the
    input id type won't be stored by the core api so it will cause
    RuleManagers db sanity checks to fail 

    -check     a pre exec option if you want to use it on the farm
    -write     whether to write the results to the database, by default
               this is true but i can be switched off with -nowrite
    -verbose   switch on a series of chatty prints giving you info about
               how its running
    -help      summary of options

=head1 EXAMPLES

  ./test_RunnableDB -dbhost ecs2b -dbuser ensadmin -dbpass **** -dbname
  rat_Jun03_mk2 -input_id 11.14000001-15000000 -analysis Marker

  note if -write isn't swtiched off this script requires your database
  to have pipeline tables in your database as it writes a entry to the
  input_id_analysis table when the job is complete'

=cut
