#!/usr/local/ensembl/bin/perl -w 

use strict;
use Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Pipeline::Analysis;
use Getopt::Long;
use Bio::EnsEMBL::Utils::Exception qw(verbose throw warning info);

my $dbuser = "ensro";
my $dbpass;
my $dbhost;
my $dbport;
my $dbname;
my $input_id;
my $logic_name;
my $module;
my $write = 0;
my $verbose = 0;
my $update = 0;

#Bio::EnsEMBL::Utils::Exceptions module to be by default it is set to
#WARNING as this gives warning and throws but not deprecates or infos
my @command_args = @ARGV;
&GetOptions( 
            'dbhost=s'      => \$dbhost,
            'dbname=s'      => \$dbname,
            'dbuser=s'      => \$dbuser,
            'dbpass=s'      => \$dbpass,
            'dbport=s'      => \$dbport,
            'input_id:s'    => \$input_id,
            'logic_name:s'  => \$logic_name,
            'module:s'    => \$module,
            'write!'        => \$write,
            'update!'       => \$update,
            'verbose!'      => \$verbose,
           );

$| = 1;


if(not $write){
  # safety: can't update without if we haven't written resultss
  $update = 0;
}

die "Insufficient db details given\n" unless $dbname and $dbhost;
die "No input id entered\n" unless defined ($input_id);
die "No logic_name entered\n" unless defined ($logic_name);


print STDERR "test_RunnableDB : args: $dbhost : $dbuser : $dbpass : $dbname : $input_id : $logic_name\n" if($verbose);

my $db = new Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor
  (
   -host   => $dbhost,
   -user   => $dbuser,
   -dbname => $dbname,
   -pass   => $dbpass,
   -port   => $dbport,
  );

my $analysis = $db->get_AnalysisAdaptor->fetch_by_logic_name($logic_name);

if(not defined $analysis){
  die("Could not find analysis with logic name '$logic_name' in the database\n");
}

my ($runnable, $file);

if($analysis->module =~ "Bio::"){ 
  $runnable = $analysis->module; 
  ($file = $runnable) =~ s/::/\//g;
  
}else{
  $file = "Bio/EnsEMBL/Analysis/RunnableDB/" . $analysis->module; 
  ($runnable = $file) =~ s/\//::/g;
}
eval{
  require "$file.pm";
};
if($@){
  throw("Couldn't require $file $@");
}
print STDERR "Creating RunnableDB...".$file."\n" if($verbose);

$runnable =~ s/\//::/g;
my $runobj = "$runnable"->new(-db    => $db,
			      -input_id => $input_id,
			      -analysis => $analysis,
			     );
print STDERR "Created RunnableDB; Fetching input...\n" if $verbose;
$runobj->fetch_input;
print STDERR "Fetched input; Running...\n" if($verbose);
$runobj->run;
print STDERR "Finsihed Run\n" if($verbose);

if($write){
  print STDERR "Writing output...\n" if $verbose;
  $runobj->write_output;
  print STDERR "Written output\n" if($verbose);
}



if($write and $update){
  my $sth = $db->prepare("insert into input_id_analysis(input_id, input_id_type, analysis_id, created) values( ?, ?, ?, now())");
  $sth->execute($input_id, $analysis->input_id_type, $analysis->dbID);
}

my @output;
if (ref($runobj->output)) {
  @output = @{$runobj->output};
} else {
  @output = $runobj->output;
}

#$verbose = 1;
if($verbose){
  my $group_id = 1;
  foreach my $out (@output) { 
    print "SUMMARISING GROUP\n";
    my @items = @$out;
    foreach my $item (@items) {      
      print_feature($item, $group_id);
    }
    $group_id++;
  }
}
print "There were ".@output." groups found\n\n";


sub print_feature{
  my ($block, $group_id) = @_;

  my ($q_ga, $t_ga) = @{$block->get_all_GenomicAligns};

  my ($q_name, $q_start, $q_end, $q_strand, $q_level) = 
      ($q_ga->dnafrag->name,
       $q_ga->dnafrag_start,
       $q_ga->dnafrag_end,
       $q_ga->dnafrag_strand,
       $q_ga->level_id);

  my ($t_name, $t_start, $t_end, $t_strand, $t_level) = 
      ($t_ga->dnafrag->name,
       $t_ga->dnafrag_start,
       $t_ga->dnafrag_end,
       $t_ga->dnafrag_strand,
       $t_ga->level_id);


  printf("%s\t%d\t%d\t%d\t%s\t%s\t%d\t%d\t%d\t%s\tGroup=%s\n",
         $q_name, $q_start, $q_end, $q_level,
         $q_strand == 1 ? "+" : "-",
         $t_name, $t_start, $t_end, $t_level, 
         $t_strand == 1 ? "+" : "-",
         $group_id);
}

=pod

=head1 NAME

  scripts/wga2genes/test_RunnableDB

=head1 SYNOPSIS
 
  test script for the Aligment filtering RunnableDBs

=head1 DESCRIPTION

  takes database arguments along with an input_id and an logic name

=head1 OPTIONS

    -dbhost      host name for database (gets put as host= in locator)
    -dbport      For RDBs, what port to connect to (port= in locator)
    -dbname    For RDBs, what name to connect to (dbname= in locator)
    -dbuser    For RDBs, what username to connect as (dbuser= in locator)
    -dbpass    For RDBs, what password to use (dbpass= in locator)
    -input_id  a input id for the analysis
    -logic_name  the logic_name of the analysis
    
     The above are all compulsory options you must provide them 
     otherwise the script won't work'
 
    -module the module to be run, this should either be a module which is
                present in Bio::Ensembl::Pipeline::RunnableDB or it 
                should be the full path

    These two options should be passed if your database doesn't already
    contain the analysis object you want to use, if the write flag is 
    switched on this analysis object will be stored in the database when
    the features are stored, note if you are using the pipeline the
    input id type won't be stored by the core api so it will cause
    RuleManagers db sanity checks to fail 

    -update_input_id_analysis update the input_id_analysis, this can be
               switched off with the -noupdate_input_id_analysis flag
               but if you pass the -nowrite option this will be switched
               off automatically 
    -write     whether to write the results to the database, by default
               this is true but i can be switched off with -nowrite
    -verbose   switch on a series of chatty prints giving you info about
               how its running
    -help      summary of options

=cut
