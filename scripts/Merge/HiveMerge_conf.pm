package HiveMerge_conf;

use strict;
use warnings;

use parent ('Bio::EnsEMBL::Hive::PipeConfig::HiveGeneric_conf');

use Bio::EnsEMBL::ApiVersion qw/software_version/;
use Env qw(ENSCODE);

sub default_options {
  my ($self) = @_;

  return {
    # Inherit other stuff from the parent class
    %{$self->SUPER::default_options()},

    # Name of the pipeline
    'pipeline_name' => 'merge',

    # users and passwords for read-only and write access to the genebuild MySQL servers
    'pass_r' => '',
    'user_r' => '',
    'pass_w' => '',
    'user_w' => '',
    
    # output directory. The merge will write log files here. The directory must not already exist.
    'output_dir' => '',
    
    # name of the directory where the vega checks reports will be written. This directory must not be neither output_dir nor a subdirectory of output_dir.
    'reports_dir' => '',
    
    # email to send the vega checks reports to
    'vega_checks_reports_email' => '@ebi.ac.uk',
    
    # email to send the missing CCDS report to
    'CCDS_report_email' => '@ebi.ac.uk',
    
    # name of the file containing the temporary original vega database dump
    'vega_tmp_filename' => 'vegadump.tmp',
    
    # name of the file containing the temporary previous core database dump
    'prevcore_tmp_filename' => 'prevcoredump.tmp',
    
    # name of the file containing the list of processed gene ids after running the merge
    'processed_genes_filename' => 'havana_merge_list_processed_genes.ids',
    
    # name of the file containing the list of unprocessed gene ids to be copied from the Ensembl to the merge db
    # after running the merge
    'unprocessed_genes_filename' => 'havana_merge_list_unprocessed_genes.ids',
    
    # name of the file containing the list of genes from the Havana db to be merged
    'vega_genes_for_merge_filename' => 'vega_genes_for_merge.ids',

    # name of the file containing the list of genes from the merge db to be copied into the core db
    # (it will be all of them but this allows us to chunk the file and speed up the process by running multiple copy_genes processes in parallel)
    'merge_genes_for_copy_filename' => 'merge_genes_for_copy.ids',

    # name of the file containing the list of genes from the core db to be deleted just after its creation
    'core_genes_for_deletion_filename' => 'core_genes_for_deletion.ids',

    # prefix of the output files generated by the ccds comparison
    'ccds_filename_prefix' => 'ccds_',

    # The number of jobs in the job array for the merge script. The workload will be evenly
    # distributed over these jobs no matter what number of jobs you put here.
    'njobs' => '45',#'75',

    # The maximum number of consecutive jobs for the merge code to run at any point in time.
    # A number between 10 and 20 seems to be optimal.
    'concurrent' => '15',
    
    # assembly path without patch update extension required by some scripts
    'assembly_path' => 'GRCh38',
    
    # Pipeline db, pipeline will create this automatically
    'pipeline_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_w'),
                    -pass      => $self->o('pass_w'),
                    -dbname    => "",
                    -driver    => "mysql",
    },
     
    # vega database provided by the Vega team
    'original_vega_db' => {
                    -host      => "",
                    -port      => "",
                    -user      => $self->o('user_r'),
                    -dbname    => "",
    },

    # vega database to be used for the merge
    'vega_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_w'),
                    -pass      => $self->o('pass_w'),
                    -dbname    => "",
    },

    # ensembl database to be used for the merge
    'ensembl_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_r'),
                    -pass      => $self->o('pass_r'),
                    -dbname    => ""
    },
    
    # merge output database containing the merged gene set
    'merge_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_w'),
                    -pass      => $self->o('pass_w'),
                    -dbname    => ""
    },
    
    # ccds database containing the CCDS gene set
    'ccds_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_r'),
                    -pass      => $self->o('pass_r'),
                    -dbname    => ""
    },
    
    # previous core database (available on ens-staging or ens-livemirror)
    'prevcore_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_r'),
                    -pass      => $self->o('pass_r'),
                    -dbname    => ""
    },
    
    # core database
    'core_db' => {
                    -host      => "",
                    -port      => "3306",
                    -user      => $self->o('user_w'),
                    -pass      => $self->o('pass_w'),
                    -dbname    => ""
    },
  };
}

sub resource_classes {
      my $self = shift;
          return {
            'default' => { 'LSF' => '-q normal -M900 -R"select[mem>900] rusage[mem=900,myens_build12tok=10,myens_build12tok=10,myens_build12tok=10]"' },
            'normal_1500' => { 'LSF' => '-q normal -M 1500 -R "select[mem>1500]" -R "rusage[mem=1500,myens_build12tok=10,myens_build12tok=10,myens_build12tok=10]"'},
            'normal_4600' => { 'LSF' => '-q normal -M 4600 -R "select[mem>4600]" -R "rusage[mem=4600,myens_build12tok=10,myens_build12tok=10,myens_build12tok=10]"'},
            'normal_7900' => { 'LSF' => '-q normal -M 7900 -R "select[mem>7900]" -R "rusage[mem=7900,myens_build12tok=10,myens_build12tok=10,myens_build12tok=10]"'},
            'normal_12000' => { 'LSF' => '-q normal -M 12000 -R "select[mem>12000]" -R "rusage[mem=12000,myens_build12tok=10,myens_build12tok=10,myens_build12tok=10]"'},
            'local' => {'LOCAL' => ''},
                }
}

sub pipeline_create_commands {
    my ($self) = @_;

      return [
          # Inherit database and hive tables creation commands
              @{$self->SUPER::pipeline_create_commands},
                ];
}


sub pipeline_analyses {
  my ($self) = @_;

  return [
            {
              -logic_name => 'create_reports_dir',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'mkdir -p '.$self->o('reports_dir').";".
                                          'mkdir -p '.$self->o('output_dir')
                             },
              -flow_into => { 1 => ['create_vega_db'] },
              -rc_name => 'local',
              -input_ids => [ {} ],
            },  
            {
              -logic_name => 'create_vega_db',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCreateDatabase',
              -parameters => {
              	                create_type => 'copy',
                                source_db => $self->o('original_vega_db'),
                                target_db => $self->o('vega_db'),
                                pass_w => $self->o('pass_w'),
                                user_w => $self->o('user_w'),
                                db_dump_file => $self->o('output_dir').$self->o('vega_tmp_filename'),
                                #ignore_dna => 1, # the vega db does not have any dna
                             },
             -flow_into => { 1 => ['list_toplevel_for_vega_checks_before'] },
            },
            
            {
              -logic_name => 'create_merge_db',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCreateDatabase',
              -parameters => {
              	                script_path => "$ENSCODE/ensembl-personal/genebuilders/scripts/clone_database.ksh",
                                create_type => 'clone',
                                source_db => $self->o('ensembl_db'),
                                target_db => $self->o('merge_db'),
                             },
             -input_ids => [ {} ],
            },
            
            {
              -logic_name => 'create_core_db',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCreateDatabase',
              -parameters => {
                                create_type => 'copy',
                                source_db => $self->o('prevcore_db'),
                                target_db => $self->o('core_db'),
                                pass_w => $self->o('pass_w'),
                                user_w => $self->o('user_w'),
                                db_dump_file => $self->o('output_dir').$self->o('prevcore_tmp_filename'),
                             },
             -input_ids => [ {} ],
             -rc_name => 'normal_7900',
             -flow_into => { 1 => ['list_core_genes'] },
            },

            {
              -logic_name => 'list_core_genes',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'mysql -NB -u'.$self->o('user_r').
                                               ' -h'.$self->o('core_db','-host').
                                               ' -D'.$self->o('core_db','-dbname').
                                               ' -P'.$self->o('core_db','-port').
                                               ' -e"SELECT gene_id from gene g,seq_region sr where g.seq_region_id=sr.seq_region_id and name <> '."'".'MT'."'".
                                               '" > '.$self->o('output_dir').$self->o('core_genes_for_deletion_filename')
                             },
              -rc_name => 'local',
              -flow_into => { 1 => ['chunk_core_genes'] },
            },
            
             {

              -logic_name => 'chunk_core_genes',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::FileFactory',
              -parameters => {
                               inputfile => $self->o('output_dir').$self->o('core_genes_for_deletion_filename'),
                               output_dir => $self->o('output_dir'),
                               output_prefix => $self->o('core_genes_for_deletion_filename')."_chunk_",
                             },

              -flow_into => { '2->A' => [ 'delete_core_genes' ],
                              'A->1' => [ 'core_sql_truncates' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'delete_core_genes',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               cmd => "perl $ENSCODE/ensembl-analysis/scripts/genebuild/delete_genes.pl"
                                     ." -dbhost ".$self->o('core_db','-host')
                                     ." -dbuser ".$self->o('core_db','-user')
                                     ." -dbpass ".$self->o('core_db','-pass')
                                     ." -dbname ".$self->o('core_db','-dbname')
                                     ." -dbport ".$self->o('core_db','-port')
                                     ." -idfile #file#"
                               
                             },
               -analysis_capacity => 25,
               -hive_capacity => 25,
               -max_retry_count => 2,
               -rc_name => 'normal_1500',
            },
            {
              -logic_name => 'core_sql_truncates',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('core_db','-user').':'.$self->o('core_db','-pass').'@'.$self->o('core_db','-host').':'.$self->o('core_db','-port').'/'.$self->o('core_db','-dbname'),
                               sql => [ 'TRUNCATE xref',
                                        'TRUNCATE object_xref',
                                        'TRUNCATE external_synonym',
                                        'TRUNCATE dependent_xref',
                                        'TRUNCATE interpro',
                                        'TRUNCATE identity_xref',
                                        'DELETE FROM unmapped_object WHERE type LIKE "xref"'                                        
                                       ],
                             },
              -max_retry_count => 0,
              -rc_name => 'local',
            },

            {
              -logic_name => 'list_toplevel_for_vega_checks_before',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
              -parameters => {
                               inputcmd => 'mysql -NB -u'.$self->o('user_r').
                                           ' -h'.$self->o('vega_db','-host').
                                           ' -D'.$self->o('vega_db','-dbname').
                                           ' -P'.$self->o('vega_db','-port').
                                           ' -e"select sr.name from seq_region sr, seq_region_attrib sra where sr.seq_region_id = sra.seq_region_id and sr.name not like \'LRG\_%\' and attrib_type_id = (select attrib_type_id from attrib_type where code=\'toplevel\');"',
                               column_names => ['chromosome'],
                             },
              -flow_into => { '2->A' => [ 'vega_checks_before' ],
                              'A->1' => [ 'vega_checks_before_concat' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'vega_checks_before',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveVegaChecks',
              -parameters => {
              	               dbname => $self->o('vega_db','-dbname'),
                               dbhost => $self->o('vega_db','-host'),
                               dnadbname => $self->o('ensembl_db','-dbname'),
                               dnadbhost => $self->o('ensembl_db','-host'),
                               coord_system => 'toplevel',
                               path => $self->o('assembly_path'),
                               sql_output => $self->o('output_dir').'vega_checks_before_#chromosome#.sql',
                               dbtype => '', # can be 'vega' or '' (empty string)
                               port => '3306',
                               user => $self->o('user_w'),
                               pass => $self->o('pass_w'),
                               #chromosome => '',
                               write => 1,
                               affix => 0, # perform the checks by using the biotypes with or without the prefixes and suffixes like weird_, _Ens, _hav, ... ; without affixes by default
                               biotypes_extension => 0,
                               stdout_file => $self->o('reports_dir').'/vega_checks_before_#chromosome#.out',
                               stderr_file => $self->o('reports_dir').'/vega_checks_before_#chromosome#.err',
                             },
              -hive_capacity    => 30,
              -analysis_capacity => 30,
            },
            {
              -logic_name => 'vega_checks_before_concat',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'cat '.$self->o('reports_dir').'/vega_checks_before_*.out > '.
                                                 $self->o('reports_dir').'/vega_checks_before.out'
                             },
              -flow_into => { 1 => ['vega_checks_before_report'] },
              -rc_name => 'local',
            },            
            {
              -logic_name => 'vega_checks_before_report',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::TextfileByEmail',
              -parameters => {
                               email => $self->o('vega_checks_reports_email'),
                               subject => 'AUTOMATED REPORT: vega biotype combinations',
                               text => 'Please find below the list of not allowed gene and transcript biotype combinations BEFORE the merge found in the vega database '.$self->o('vega_db','-dbname').'. Please note that any change applied to the list of allowed biotype combinations will take effect in a future release (not the next release).',
                               file => $self->o('reports_dir').'/vega_checks_before.out',
                               command => "grep 'not allowed\\.' | awk '{print \$9,\$18}' | sort | uniq -c | sort -nr",
                             },
              -flow_into => { 1 => ['prepare_vega_db'] },
              -rc_name => 'local',
            },

            {
              -logic_name => 'prepare_vega_db',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveVegaPreparation',
              -parameters => {
                               output_path => $self->o('output_dir').'vega_preparation/',
                               dbhost => $self->o('vega_db','-host'),
                               dbname => $self->o('vega_db','-dbname'),
                               dbuser => $self->o('user_w'),
                               dbpass => $self->o('pass_w'),
                               dbport => $self->o('vega_db','-port'),
                               dnadbhost => $self->o('ensembl_db','-host'),
                               dnadbport => $self->o('ensembl_db','-port'),
                               dnadbname => $self->o('ensembl_db','-dbname'),
                               check_vega_met_stop_dir => "$ENSCODE/ensembl-analysis/scripts/Merge",
                               skip => 0,
                               only => 0,
                             },
              -flow_into => { 1 => ['list_vega_genes_for_merge'] },
            },
            
            {
              -logic_name => 'list_vega_genes_for_merge',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'mysql -NB -u'.$self->o('user_r').
                                               ' -h'.$self->o('vega_db','-host').
                                               ' -D'.$self->o('vega_db','-dbname').
                                               ' -P'.$self->o('vega_db','-port').
                                               ' -e"SELECT gene_id from gene;" > '.
                                               $self->o('output_dir').$self->o('vega_genes_for_merge_filename')
                             },
              -flow_into => { 1 => ['chunk_vega_genes_for_merge'] },
              -rc_name => 'local',
            },
            
            {
              -logic_name => 'chunk_vega_genes_for_merge',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::FileFactory',
              -parameters => {
                               inputfile => $self->o('output_dir').$self->o('vega_genes_for_merge_filename'),
                               output_dir => $self->o('output_dir'),
                               output_prefix => $self->o('vega_genes_for_merge_filename')."_chunk_",
                             },
              -flow_into => { '2->A' => ['havana_merge'],
                              'A->1' => ['havana_merge_list_processed_genes'],
                            },
              -rc_name => 'local',
            },
            
            {
              -logic_name => 'havana_merge',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveMerge',
              -parameters => {
                               ensembl_analysis_base => "$ENSCODE/ensembl-analysis",
                               host_secondary => $self->o('ensembl_db','-host'),
                               user_secondary => $self->o('user_r'),
                               password_secondary => $self->o('pass_r'),
                               database_secondary => $self->o('ensembl_db','-dbname'),
                               host_primary => $self->o('vega_db','-host'),
                               user_primary => $self->o('user_r'),
                               password_primary =>$self->o('pass_r'),
                               database_primary => $self->o('vega_db','-dbname'),
                               host_ccds => $self->o('ccds_db','-host'),
                               user_ccds =>$self->o('user_r'),
                               password_ccds => $self->o('pass_r'),
                               database_ccds => $self->o('ccds_db','-dbname'),
                               host_output => $self->o('merge_db','-host'),
                               user_output =>$self->o('user_w'),
                               password_output => $self->o('pass_w'),
                               database_output => $self->o('merge_db','-dbname'),
                               secondary_include => '',
                               secondary_exclude => '',
                               primary_include => '',
                               primary_exclude => '',
                               
                               # Tagging:  Will be used as suffix for logic names ("_tag") and for
                               # source.  With the default settings, merged genes and transcripts will
                               # get the source "secondary_primary".
                               
                               secondary_tag => 'ensembl',
                               primary_tag => 'havana',
                               
                               # Xrefs:  The format is a comma-separated list of
                               # "db_name,db_display_name,type"
                               
                               primary_gene_xref => 'OTTG,Havana gene,ALT_GENE',
                               primary_transcript_xref => 'OTTT,Havana transcript,ALT_TRANS',
                               primary_translation_xref => 'OTTP,Havana translation,MISC',
                               
                               # as the chunks (and a job per chunk) are created in the step before,
                               # these parameters would define how many jobs per chunk we want, just 1 as we don't want chunks of chunks
                               # and we cannot use the LSF job index on the ehive to create chunks of chunks here anyway
                               njobs => 1, #$self->o('njobs'),
                               job => 1,   #$LSB_JOBINDEX
                               
                               #file => '', this parameter will come from 'chunk_genes_for_merge' output, see FileFactory.pm
                             },
              -rc_name => 'normal_1500',
              -analysis_capacity => $self->o('njobs'),
              -hive_capacity => $self->o('njobs'),
              -max_retry_count => 0,
              -wait_for => ['create_merge_db'],
            },

            {
              -logic_name => 'havana_merge_list_processed_genes',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => "awk '\$1 == ".'"'."PROCESSED".'"'." {print \$2}' ".$self->o('output_dir')."/*merge-run*.out ".
                               " | sort -u -n > ".$self->o('output_dir').$self->o('processed_genes_filename')
                             },
              -rc_name => 'local',
              -flow_into => { 1 => ['havana_merge_list_unprocessed_genes'] },
            },

            {
              -logic_name => 'havana_merge_list_unprocessed_genes',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveListUnprocessed',
              -parameters => {
              	               processed_genes_filename => $self->o('processed_genes_filename'),
              	               output_dir => $self->o('output_dir'),
              	               output_file => $self->o('unprocessed_genes_filename'),
                               host_secondary => $self->o('ensembl_db','-host'),
                               user_secondary => $self->o('user_r'),
                               password_secondary => $self->o('pass_r'),
                               database_secondary => $self->o('ensembl_db','-dbname'),
                               secondary_include => '',
                               secondary_exclude => '',
                             },
              -rc_name => 'local',
              #-hive_capacity    => 100,
              -flow_into => { 1 => ['chunk_unprocessed_genes'] },
            },
            
            {
              -logic_name => 'chunk_unprocessed_genes',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::FileFactory',
              -parameters => {
                               inputfile => $self->o('output_dir').$self->o('unprocessed_genes_filename'),
                               output_dir => $self->o('output_dir'),
                               output_prefix => $self->o('unprocessed_genes_filename')."_chunk_",
                             },
              -flow_into => { '2->A' => [ 'havana_merge_copy_unprocessed_genes' ],
                              'A->1' => [ 'havana_merge_set_ncrna' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'havana_merge_copy_unprocessed_genes',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCopyGenes',
              -parameters => {
                               copy_genes_path => '$ENSCODE/ensembl-analysis/scripts/genebuild/',
                               copy_genes_script_name => 'copy_genes.pl',

                               # copy_genes.pl script parameters
                               logic => 'ensembl',
                               sourcehost => $self->o('ensembl_db','-host'),
                               sourceuser => $self->o('ensembl_db','-user'),
                               sourceport => $self->o('ensembl_db','-port'),
                               sourcepass => $self->o('ensembl_db','-pass'),
                               sourcedbname => $self->o('ensembl_db','-dbname'),
                               outhost => $self->o('merge_db','-host'),
                               outuser => $self->o('merge_db','-user'),
                               outpass => $self->o('merge_db','-pass'),
                               outdbname => $self->o('merge_db','-dbname'),
                               outport => $self->o('merge_db','-port'),
                               dnahost => $self->o('ensembl_db','-host'),
                               dnadbname => $self->o('ensembl_db','-dbname'),
                               dnauser => $self->o('ensembl_db','-user'),
                               dnaport => $self->o('ensembl_db','-port'),
                               #file => $self->o('output_dir').$self->o('unprocessed_genes_filename'),
                             },
               -analysis_capacity => 20,
               -hive_capacity => 20,
               -max_retry_count => 0,
            },
            
            {
              -logic_name => 'havana_merge_set_ncrna',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ 'INSERT IGNORE analysis(logic_name) VALUES("ncrna")',
                                        'UPDATE gene g,analysis a SET g.analysis_id=(SELECT analysis_id FROM analysis where logic_name="ncrna") 
                                                                  WHERE g.analysis_id=a.analysis_id
                                                                         AND a.logic_name="ensembl"
                                                                         AND g.biotype in (
                                                                                           "miRNA",
                                                                                           "misc_RNA",
                                                                                           "ribozyme",
                                                                                           "rRNA",
                                                                                           "scaRNA",
                                                                                           "snoRNA",
                                                                                           "snRNA",
                                                                                           "sRNA"
                                                                                          )',
                                        'UPDATE transcript t,analysis a SET t.analysis_id=(SELECT analysis_id FROM analysis where logic_name="ncrna") 
                                                                   WHERE t.analysis_id=a.analysis_id
                                                                         AND a.logic_name="ensembl"
                                                                         AND t.biotype in (
                                                                                           "miRNA",
                                                                                           "misc_RNA",
                                                                                           "ribozyme",
                                                                                           "rRNA",
                                                                                           "scaRNA",
                                                                                           "snoRNA",
                                                                                           "snRNA",
                                                                                           "sRNA"
                                                                                          )' 
                                       ],
                             },
              -flow_into => { 1 => ['havana_merge_set_igtr_analysis_biotypes'] },
            },
            
            {
              -logic_name => 'havana_merge_set_igtr_analysis_biotypes',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ 'UPDATE gene g SET g.biotype=REPLACE(g.biotype,"_","_V_")
                                                                     WHERE (g.description LIKE "%variable%" OR
                                                                            g.description LIKE "%variant%" OR
                                                                            g.description LIKE "%ighv%" OR
                                                                            g.description LIKE "%immunog.%V.%pseudogene%")
                                                                           AND
                                                                           (g.biotype LIKE "IG\_%" OR
                                                                            g.biotype LIKE "TR\_%")
                                         ',
                                         'UPDATE gene g SET g.biotype=REPLACE(g.biotype,"_","_C_")
                                                                     WHERE (g.description LIKE "%constant%")
                                                                           AND
                                                                           (g.biotype LIKE "IG\_%" OR
                                                                            g.biotype LIKE "TR\_%")
                                         ',
                                         'UPDATE gene g SET g.biotype=REPLACE(g.biotype,"_","_J_")
                                                                     WHERE (g.description LIKE "%joining%")
                                                                           AND
                                                                           (g.description NOT LIKE "%constant%")
                                                                           AND
                                                                           (g.biotype LIKE "IG\_%" OR
                                                                            g.biotype LIKE "TR\_%")
                                         ',
                                         'UPDATE gene g SET g.biotype=REPLACE(g.biotype,"_","_D_")
                                                                     WHERE (g.description LIKE "%diversity%")
                                                                           AND
                                                                           (g.biotype LIKE "IG\_%" OR
                                                                            g.biotype LIKE "TR\_%")
                                         ',
                                         'UPDATE transcript t,gene g SET t.biotype=g.biotype
                                                                     WHERE t.gene_id = g.gene_id
                                                                           AND
                                                                           (g.biotype LIKE "IG\_%" OR
                                                                            g.biotype LIKE "TR\_%")
                                         ',
                                         'UPDATE gene g SET analysis_id=(SELECT analysis_id FROM analysis WHERE logic_name="ensembl_ig_gene")
                                                      WHERE (g.biotype LIKE "IG\_%" OR
                                                             g.biotype LIKE "TR\_%")
                                                            AND
                                                            analysis_id=(SELECT analysis_id FROM analysis WHERE logic_name="ensembl")
                                         ',
                                         'UPDATE transcript SET analysis_id=(select analysis_id FROM analysis WHERE logic_name="ensembl_ig_gene")
                                                            WHERE (biotype LIKE "IG\_%" OR
                                                                   biotype LIKE "TR\_%")
                                                                  AND
                                                                  analysis_id=(SELECT analysis_id FROM analysis WHERE logic_name="ensembl")
                                         '
                                       ],
                             },
              -max_retry_count => 0,
              -flow_into => { 1 => ['list_toplevel_for_vega_checks_after'] },
            },            
           
            {

              -logic_name => 'list_toplevel_for_vega_checks_after',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
              -parameters => {
                               inputcmd => 'mysql -NB -u'.$self->o('user_r').
                                           ' -h'.$self->o('merge_db','-host').
                                           ' -D'.$self->o('merge_db','-dbname').
                                           ' -P'.$self->o('merge_db','-port').
                                           ' -e"select sr.name from seq_region sr, seq_region_attrib sra where sr.seq_region_id = sra.seq_region_id and sr.name not like \'LRG\_%\' and attrib_type_id = (select attrib_type_id from attrib_type where code=\'toplevel\');"',
                               column_names => ['chromosome'],
                             },
              -flow_into => { '2->A' => [ 'vega_checks_after' ],
                              'A->1' => [ 'vega_checks_after_concat' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'vega_checks_after_concat',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'cat '.$self->o('reports_dir').'/vega_checks_after_*.out > '.
                                                 $self->o('reports_dir').'/vega_checks_after.out'
                             },
              -flow_into => { 1 => ['vega_checks_after_report'] },
              -rc_name => 'local',
            },            

            {
              -logic_name => 'vega_checks_after',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveVegaChecks',
              -parameters => {
                               dbname => $self->o('merge_db','-dbname'),
                               dbhost => $self->o('merge_db','-host'),
                               dnadbname => $self->o('ensembl_db','-dbname'),
                               dnadbhost => $self->o('ensembl_db','-host'),
                               coord_system => 'toplevel',
                               path => $self->o('assembly_path'),
                               sql_output => $self->o('output_dir').'vega_checks_after_#chromosome#.sql',
                               dbtype => '', # can be 'vega' or '' (empty string)
                               port => '3306',
                               user => $self->o('user_w'),
                               pass => $self->o('pass_w'),
                               #chromosome => '',
                               write => 1,
                               affix => 1, # perform the checks by using the biotypes with or without the prefixes and suffixes like weird_, _Ens, _hav, ... ; with affixes by default
                               biotypes_extension => 1,
                               stdout_file => $self->o('reports_dir').'/vega_checks_after_#chromosome#.out',
                               stderr_file => $self->o('reports_dir').'/vega_checks_after_#chromosome#.err',
                             },
              -hive_capacity    => 30,
              -analysis_capacity => 30,
            },
            
            {
              -logic_name => 'vega_checks_after_report',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::TextfileByEmail',
              -parameters => {
                               email => $self->o('vega_checks_reports_email'),
                               subject => 'AUTOMATED REPORT: merge biotype combinations',
                               text => 'Please find below the list of not allowed gene and transcript biotype combinations AFTER the merge found in the merge database '.$self->o('merge_db','-dbname').'. Any artifact transcript listed below will be deleted. Please note that any change applied to the list of allowed biotype combinations will take effect in a future release (not the next release).',
                               file => $self->o('reports_dir').'/vega_checks_after.out',
                               command => "grep 'not allowed\\.' | awk '{print \$9,\$18}' | sort | uniq -c | sort -nr",
                             },
              -flow_into => { 1 => ['delete_artifacts'] },
              -rc_name => 'local',
            },
            {
              -logic_name => 'delete_artifacts',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveDeleteTranscripts',
              -parameters => {
              	               biotype => 'artifact',
                               dbhost => $self->o('merge_db','-host'),
                               dbname => $self->o('merge_db','-dbname'),
                               dbuser => $self->o('user_w'),
                               dbpass => $self->o('pass_w'),
                               dbport => $self->o('merge_db','-port'),
                               delete_transcripts_path => '$ENSCODE/ensembl-analysis/scripts/genebuild/',
                               delete_genes_path => '$ENSCODE/ensembl-analysis/scripts/genebuild/',
                               delete_transcripts_script_name => 'delete_transcripts.pl',
                               delete_genes_script_name => 'delete_genes.pl',
                               output_path => $self->o('output_dir').'delete_artifacts/',
                               output_file_name => 'delete_artifacts.out',
                               email => $self->o('vega_checks_reports_email'),
                               from => 'ensembl-genebuild@ebi.ac.uk'
                             },
              -max_retry_count => 0,
              -flow_into => { 1 => ['set_temp_stable_ids'] },
            },

            {
              # make sure that all my transcript have stable IDs so that the CCDS can be added as supporting features later on
              -logic_name => 'set_temp_stable_ids',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ "UPDATE transcript SET stable_id=CONCAT('TEMPSID',transcript_id) WHERE stable_id IS NULL" ],
                             },
               -max_retry_count => 3,
               -rc_name => 'local',
               -flow_into => { 1 => ['list_toplevel'] },
            },

            {

              -logic_name => 'list_toplevel',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
              -parameters => {
                               inputcmd => 'mysql -NB -u'.$self->o('user_r').
                                           ' -h'.$self->o('merge_db','-host').
                                           ' -D'.$self->o('merge_db','-dbname').
                                           ' -P'.$self->o('merge_db','-port').
                                           ' -e"select sr.name from seq_region sr, seq_region_attrib sra where sr.seq_region_id = sra.seq_region_id and sr.name not like \'LRG\_%\'and attrib_type_id = (select attrib_type_id from attrib_type where code=\'toplevel\');"',
                               column_names => ['chr'],
                             },
              -flow_into => { '2->A' => [ 'alternative_atg_attributes', 'ccds_comparison' ],
                              'A->1' => [ 'ccds_addition' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'alternative_atg_attributes',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               cmd => 'perl $ENSEMBL_PERSONAL/genebuilders/scripts/look_for_upstream_atg.pl'.
                                      ' -dbuser '.$self->o('user_w').
                                      ' -dbpass '.$self->o('pass_w').
                                      ' -dbhost '.$self->o('merge_db','-host').
                                      ' -dbport '.$self->o('merge_db','-port').
                                      ' -dbname '.$self->o('merge_db','-dbname').
                                      ' -dna_user '.$self->o('user_r').
                                      ' -dna_host '.$self->o('ensembl_db','-host').
                                      ' -dna_port '.$self->o('ensembl_db','-port').
                                      ' -dna_dbname '.$self->o('ensembl_db','-dbname').
                                      ' -upstream_dist 200'.
                                      ' -chromosomes #chr#'.
                                      ' -genetypes protein_coding'.
                                      ' -coord_system toplevel'.
                                      ' -path '.$self->o('assembly_path')
                             },
               -analysis_capacity => 25,
               -hive_capacity => 25,
               -max_retry_count => 2,
               -rc_name => 'normal_1500',
            },

            {
              -logic_name => 'ccds_comparison',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               cmd => 'perl $ENSEMBL_ANALYSIS/scripts/Merge/ccds_merge_comparison.pl'.
                                      ' -dbname '.$self->o('ccds_db','-dbname').
                                      ' -host '.$self->o('ccds_db','-host').
                                      ' -user '.$self->o('ccds_db','-user').
                                      ' -port '.$self->o('ccds_db','-port').
                                      ' -path '.$self->o('assembly_path').
                                      ' -genetype ccds_gene'. 
                                      ' -compdbname '.$self->o('merge_db','-dbname').
                                      ' -comphost '.$self->o('merge_db','-host').
                                      ' -compport '.$self->o('merge_db','-port').
                                      ' -compuser '.$self->o('user_r').
                                      ' -compgenetype protein_coding'. 
                                      ' -dnadb '.$self->o('ensembl_db','-dbname').
                                      ' -dnahost '.$self->o('ensembl_db','-host').
                                      ' -dnaport '.$self->o('ensembl_db','-port').
                                      ' -dnauser '.$self->o('user_r').
                                      ' -redundant'.
                                      ' -schema 20'.
                                      ' -coord toplevel'.
                                      ' -chromosomes #chr#'. 
                                      ' -set1_name CCDS'.
                                      ' -set2_name MERGE'.
                                      ' -file '.$self->o('output_dir').$self->o('ccds_filename_prefix').'#chr#.out'
                             },
               -analysis_capacity => 25,
               -hive_capacity => 25,
               -max_retry_count => 1,
            },
                     
            {
              -logic_name => 'ccds_addition',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCCDSAddition',
              -parameters => {
              	               copy_genes_path => '$ENSCODE/ensembl-analysis/scripts/genebuild/',
                               copy_genes_script_name => 'copy_genes.pl',
                               add_ccds_path => '$ENSCODE/ensembl-personal/genebuilders/scripts/',
                               add_ccds_script_name => 'add_ccds_support.pl',
                               
              	               ccds_comparison_output_dir => $self->o('output_dir'),
                               ccds_filename_prefix => $self->o('ccds_filename_prefix'),
                               email => $self->o('CCDS_report_email'),
                               from => 'ensembl-genebuild@ebi.ac.uk',
                               ccds_dbname => $self->o('ccds_db','-dbname'),
                               ccds_host => $self->o('ccds_db','-host'),
                               ccds_user => $self->o('ccds_db','-user'),
                               dna_dbname => $self->o('ensembl_db','-dbname'),
                               dna_host => $self->o('ensembl_db','-host'),
                               dna_user => $self->o('user_r'),
                               merge_dbname => $self->o('merge_db','-dbname'),
                               merge_host => $self->o('merge_db','-host'),
                               merge_user => $self->o('user_w'),
                               merge_pass => $self->o('pass_w'),
                               assembly_path => $self->o('assembly_path'),
                               logic_name => 'ensembl',
                             },
               -max_retry_count => 0,
               -flow_into => { 1 => ['ccds_sql_updates'] },
            },
            
            {
              -logic_name => 'ccds_sql_updates',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ 'UPDATE gene SET biotype="protein_coding" WHERE biotype="ccds_gene"',
                                        'UPDATE transcript SET biotype="protein_coding" WHERE biotype="ccds_gene"',
                                        'INSERT IGNORE analysis(created,logic_name) VALUES(now(),"ccds")',
                                        'UPDATE dna_align_feature SET analysis_id=(SELECT analysis_id FROM analysis WHERE logic_name="ccds")
                                                                WHERE analysis_id=(SELECT analysis_id FROM analysis WHERE logic_name="ccds_gene")',
                                        'UPDATE gene SET source="ensembl" WHERE source="ccds"',
                                        'DELETE FROM analysis WHERE logic_name="ccds_gene"'
                                       ],
                             },
              -max_retry_count => 0,
              -flow_into => { 1 => ['prepare_lincrnas'] },
            },

            {
              -logic_name => 'prepare_lincrnas',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ "UPDATE gene SET biotype = 'new_lincRNA' WHERE biotype = 'lincRNA'" ],
                             },
               -max_retry_count => 3,
               -rc_name => 'local',
               -flow_into => { 1 => ['transfer_lincrnas'] },
            },
            
            {
              -logic_name => 'transfer_lincrnas',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               cmd => 'perl $ENSEMBL_PERSONAL/genebuilders/scripts/transfer_lincRNAs_to_merged_gene_set.pl'.
                                      ' -dbname '.$self->o('prevcore_db','-dbname').
                                      ' -dbhost '.$self->o('prevcore_db','-host').
                                      ' -dbport '.$self->o('prevcore_db','-port').
                                      ' -dbuser '.$self->o('user_r').
                                      ' -newdbname '.$self->o('merge_db','-dbname').
                                      ' -newdbhost '.$self->o('merge_db','-host').
                                      ' -newdbuser '.$self->o('user_w').
                                      ' -newdbpass '.$self->o('pass_w').
                                      ' -vegadbname '.$self->o('vega_db','-dbname').
                                      ' -vegadbhost '.$self->o('vega_db','-host').
                                      ' -vegadbport '.$self->o('vega_db','-port').
                                      ' -vegadbuser '.$self->o('user_r').
                                      ' -coordsystem chromosome'.
                                      ' -path '.$self->o('assembly_path').
                                      ' -write '.
                                      ' -verbose'
                             },
               -max_retry_count => 0,
               -rc_name => 'normal_1500',
               -flow_into => { 1 => ['set_lincrna_biotypes'] },
            },
            
            {
              -logic_name => 'set_lincrna_biotypes',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
              -parameters => {
                               db_conn => 'mysql://'.$self->o('merge_db','-user').':'.$self->o('merge_db','-pass').'@'.$self->o('merge_db','-host').':'.$self->o('merge_db','-port').'/'.$self->o('merge_db','-dbname'),
                               sql => [ "UPDATE gene SET biotype = 'lincRNA' WHERE biotype = 'new_lincRNA'" ],
                             },
               -max_retry_count => 3,
               -rc_name => 'local',
               -flow_into => { 1 => ['list_merge_genes_for_copy'] },
            },

            {
              -logic_name => 'list_merge_genes_for_copy',
              -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               'cmd'   => 'mysql -NB -u'.$self->o('user_r').
                                               ' -h'.$self->o('merge_db','-host').
                                               ' -D'.$self->o('merge_db','-dbname').
                                               ' -P'.$self->o('merge_db','-port').
                                               ' -e"SELECT gene_id from gene;" > '.
                                               $self->o('output_dir').$self->o('merge_genes_for_copy_filename')
                             },
              -flow_into => { 1 => ['chunk_merge_genes'] },
              -rc_name => 'local',
            },

            {

              -logic_name => 'chunk_merge_genes',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::FileFactory',
              -parameters => {
                               inputfile => $self->o('output_dir').$self->o('merge_genes_for_copy_filename'),
                               output_dir => $self->o('output_dir'),
                               output_prefix => $self->o('merge_genes_for_copy_filename')."_chunk_",
                             },
              
              #-hive_capacity    => 100,
              -flow_into => { '2->A' => [ 'copy_genes_to_core' ],
                              'A->1' => [ 'dummy' ],
                            },
              -rc_name => 'local',
            },

            {
              -logic_name => 'copy_genes_to_core',
              -module => 'Bio::EnsEMBL::Analysis::Hive::RunnableDB::HiveCopyGenes',
              -parameters => {
                               copy_genes_path => '$ENSCODE/ensembl-analysis/scripts/genebuild/',
                               copy_genes_script_name => 'copy_genes.pl',

                               # copy_genes.pl script parameters
                               sourcehost => $self->o('merge_db','-host'),
                               sourceuser => $self->o('user_r'),
                               sourceport => $self->o('merge_db','-port'),
                               sourcepass => $self->o('merge_db','-pass'),
                               sourcedbname => $self->o('merge_db','-dbname'),
                               
                               outhost => $self->o('core_db','-host'),
                               outuser => $self->o('core_db','-user'),
                               outpass => $self->o('core_db','-pass'),
                               outdbname => $self->o('core_db','-dbname'),
                               outport => $self->o('core_db','-port'),
                               
                               dnahost => $self->o('ensembl_db','-host'),
                               dnadbname => $self->o('ensembl_db','-dbname'),
                               dnauser => $self->o('ensembl_db','-user'),
                               dnaport => $self->o('ensembl_db','-port'),
                             },
               -analysis_capacity => 150,
               -hive_capacity => 150,
               -max_retry_count => 0,
               -wait_for => ['core_sql_truncates'],
               -rc_name => 'normal_4600',
            },
            
            {
              -logic_name => 'dummy',
              -module => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
              -parameters => {
                               cmd => 'echo "I am dummy and I know it. TBC..."'
                             },
               -max_retry_count => 0,
               -rc_name => 'local',
            },

 
  ];
}

sub pipeline_wide_parameters {
    my ($self) = @_;

      return {
            # Inherit other stuff from the parent class
                %{$self->SUPER::pipeline_wide_parameters()},
                  };
}

1;

