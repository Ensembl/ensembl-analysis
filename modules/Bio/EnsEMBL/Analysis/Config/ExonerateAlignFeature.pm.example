1;

# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Pipeline::Config::Affy::Exonerate2Affy

=head1 SYNOPSIS

    use Bio::EnsEMBL::Pipeline::Config::Exonerate2Genes;

=head1 DESCRIPTION

This contains the configuration for the  alignment of clone
sequences (dna) against a genome (dna)
using exonerate. So this config looks very similar to that
of any other exonerate-driving config.

The layout of the configuration is a set of hashes,
each one keyed by logic name. There is also a DEFAULT hash,
which is used as the default for all logic names 

=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::ExonerateAlignFeature;

use strict;
use vars qw( %Config );

%Config = (
  EXONERATE_ALIGNFEAT_CONFIG => {
    DEFAULT => {
      
      GENOMICSEQS => '/path/to/genome/file/or/dir',
      QUERYTYPE   => 'dna',
      QUERYSEQS   => '/path/to/query/file/or/dir', 

      EXTEND_QUERYSEQS_DIR_WITH_LOGIC_NAME   => '0', # useful if you set up a lot of runs; QUERYSEQS will be used as root dir 
                                                     # and extended with logic_name : $QUERYSEQS/$analysis->logic_name/chunk23.fa
                                                     # This saves you adding QUERYSEQ dirs for ann logica names you're running,
                                                     # if your chunk dir name equals your logic name.. 

      # the following is only needed if using chunking
      IIDREGEXP   => '(\d+):(\d+)',

      # insert your options here. Note: this system does not support
      # the transcript-based models (est2genome, protein2genome); use
      # Exonerate2Genes for that
      OPTIONS     => '--model affine:local --bestn 1 --softmasktarget TRUE ',

       FILTER => {
                  OBJECT     => 'Bio::EnsEMBL::Analysis::Tools::BasicFilter',
                  PARAMETERS => {
                                  -score => 'greaterthan 140',
                                  -percent_id => 'greaterthan 90',
                                 },
                },
       # score = read_length * 5  
    },
  }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
