# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Bio::EnsEMBL::Analysis::Config:IgSegBuilder

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::Genebuild::IgSegBuilder;

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::IgSegBuilder;

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (
           IGSEG_CONFIG_BY_LOGIC => {
             DEFAULT => {

               TRANDB_DATABASES_NAME => 'IG_EXONERATE_DB',
               LV_LOGICS => [],
               D_LOGICS  => [],
               J_LOGICS  => [],
               C_LOGICS  => [],

               LV_OUTPUT_BIOTYPE => 'LV_segment',
               D_OUTPUT_BIOTYPE => 'D_segment',
               J_OUTPUT_BIOTYPE => 'J_segment',
               C_OUTPUT_BIOTYPE => 'C_segment',

               SUPPORTING_FEATURE_OUTPUT_LOGIC => '',

               OUTPUTDB_DATABASES_NAME     => 'IG_OUTPUT_DB',

               # D/J genes that are not closer than the distance
               # below to a V/C gene are rejected               
               D_J_PROXIMITY_THRESHOLD => 200000,

             },
           }
           );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
