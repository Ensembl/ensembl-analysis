#
# package Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAFinder 
# 
# Cared for by EnsEMBL (ensembl-dev@ebi.ac.uk)
#
# Copyright GRL & EBI
#
# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAFinder

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild:lincRNAFinder 

=head1 DESCRIPTION


=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAFinder; 

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (

           LINCRNA_CONFIG_BY_LOGIC => 
           {
              DEFAULT => { 
                          #    
                          # i need to change this part some day to use the same as we use for VAILDATION_DB 
                          #  ( get rid of clustering_input_genees and just have set_name{dbname} [ biotypes ]  
                          #    
                          NEW_SET_1_CDNA => { 
                                                 SOURCE_CDNA_UPDATE_DB    => ['cDNA_update'],   
                                            }, 

                          NEW_SET_2_PROT  => {  
                                                 SOURCE_PROTEIN_CODING_DB => ['protein_coding'],  
                                             }, 

                          # where output will be written to (genes and cdnas) 
                          OUTPUT_DB => 'LINCRNA_OUTPUT_DB', 
                          OUTPUT_BIOTYPE => 'lincRNA_finder',  

                          EFG_FEATURE_DB    => 'REFERENCE_DB', 
                          EFG_FEATURE_NAMES => ['H3K4me3','H3K36me3'],   # logic names of simple features in EFG_FEATURE_DB ( these should be the K4/K36 domains ) 
                          EXTEND_EFG_FEATURES => 350 ,   # sol_cdna with 100 bp 

                          MAXIMUM_TRANSLATION_LENGTH_RATIO => 35 , # maxium percentage translation-length for a cDNA to be to be still 
                                                                   # considered as non-coding  
                            
                          MAX_TRANSLATIONS_PER_GENE =>10,         # the module computes all possible open reading frames for a transcript; it's wise to limit them, 
                                                                   # to the ten longest translations per gene ( you can end up with 200 translations / gene and pfam 
                                                                   #  analysis will tage ages. 
                                                                   #
                          # The configuration options below are for development / debugging purposees only; 
                          # you don't have to configure this unless you want to change names etc.
                          DEBUG_WRITE_CLUSTERED_GENES => 0,  
                           DEBUG_OUTPUT_DB    => 'LINCRNA_OUTPUT_DB', 
                                                                                        # The analyses below will be created automatically :
                           DEBUG_LG_EFG_CLUSTERING_WITH_CDNA => 'efg_cdna_cluster_new', # logic_name for efg-features which cluster 
                                                                                        # with cDHA ( but not with protein coding ) 
                           DEBUG_LG_EFG_UNCLUSTERED  => 'efg_NO_cdna_update_new',       # logic_name for efg-features which do NOT cluster
                                                                                        # with cdna or protein_coding genes;  
                                                                                        #
                                                                                        #    
                        }, 

               lincrna => {},
            }
         );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
