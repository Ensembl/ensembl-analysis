# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAFinder

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild:lincRNAFinder 

=head1 DESCRIPTION

  This is a configuration file holding settings for the lincRNAFinder step
  of the lincRNA annotation pipeline. The configuration variables specify
  where source data sets should be fetched for running lincRNAFinder,
  as well as how gene clustering and data filtering should be run.

=head1 CONTACT
B<http://lists.ensembl.org/mailman/listinfo/dev>

=cut

package Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAFinder; 

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (

           LINCRNA_CONFIG_BY_LOGIC => 
           {
              DEFAULT => { 

                  # cDNA / RNASeq model / protein-coding gene databases
                  # ---------------------------------------------------

                  # SOURCE_CDNA_UPDATE_DB is the database holding cDNAs or transcript models (e.g. built from Illumina
                  # RNASeq data) which will be considered as potential lincRNAs
 
                  # SOURCE_PROTEIN_CODING_DB is the database holding the latest protein_coding genes for the analysed
                  # species.  This database usually is the latest Ensembl core DB available.

                  NEW_SET_1_CDNA => { 
                                         SOURCE_CDNA_UPDATE_DB    => ['cdna_update'],   
                                    }, 

                  NEW_SET_2_PROT  => {  
                                         SOURCE_PROTEIN_CODING_DB => ['protein_coding'],  
                                     }, 


                  # Fetching Ensembl functional-genomics/Regulation H3 "simple" features
                  # ---------------------------------------------------------------------

                  # where the feature are stored:

                  EFG_FEATURE_DB    => 'REFERENCE_DB',

                  # logic_names of simple features in EFG_FEATURE_DB.  The text strings "H3K4" and "H3K36" are matched
                  # by regex in the lincRNAFinder Runnable, so make  sure the logic_names contain the strings:

                  EFG_FEATURE_NAMES => ['H3K4me3','H3K36me3'],  

                  # Padding of H3 features before they are clustered with "proper" cDNAs (from Ensembl cDNA_update data set) to 
                  # compensate for (sometimes) conservative peak-calling in EFG data. Default set to 350bp for cDNA data.
                  # If RNASeq transcript models are used, try using 100bp padding (to be more stringent due to the nature of RNASeq models):

                  EXTEND_EFG_FEATURES => 350, 


                  # Clustering options (all boolean)
                  # ------------------
                  
                  # Set "FIND_SINGLE_EXON_LINCRNA_CANDIDATES" to "1" if you allow single-exon cDNAs/RNASeq models to be considered as 
                  # lincRNA candidates and proceed to later stages of the pipeline (e.g. protein annotation, lincRNAEvalutaor)

                  FIND_SINGLE_EXON_LINCRNA_CANDIDATES => 0,

                  # Set "CDNA_CODING_GENE_CLUSTER_IGNORE_STRAND" to  "1" if you want to exclude multi-exon cDNAs/RNASeq models which
                  # overlap protein-coding genes on *ANY* strand from being considered as lincRNA candidates.
                  # (For the sake of completeness, single-exon cDNAs/RNASeq models are hard-coded to cluster with protein-coding genes
                  # on any strand, i.e. strandedness is always ignored).

                  CDNA_CODING_GENE_CLUSTER_IGNORE_STRAND => 0,

                  # Set "CHECK_CDNA_OVERLAP_WITH_BOTH_K4_K36" to "1" if a cDNA/RNASeq model has to overlap with *both* H3K4me3 and H3K36me3 
                  # features in order to be considered as  a lincRNA candidate, otherwise, overlap with either type of features will do.

                  CHECK_CDNA_OVERLAP_WITH_BOTH_K4_K36 => 0,


                  # Used in conjunction with "CHECK_CDNA_OVERLAP_WITH_BOTH_K4_K36", set "CHECK_CDNA_OVERLAP_WITH_MULTI_K36" to "1" if you
                  # also allow cDNA/RNASeq model overlapping wtih multiple H3K36me3 features but no H3K4me3 features to be considered as a 
                  # lincRNA candidate.

                  CHECK_CDNA_OVERLAP_WITH_MULTI_K36 => 0,


                  # Check protein-coding potential in lincRNA candidates after clustering
                  # ----------------------------------------------------------------------

                  # Maximum percentage translation-length for a cDNA to be still considered as non-coding:

                  MAXIMUM_TRANSLATION_LENGTH_RATIO => 35,
                  
                  # lincRNAFinder module computes *all* possible open reading frames (ORFs) for a lincRNA candidate which clusters with
                  # H3 features. It is important to set a limit on the number of ORFs actually considered by the module
                  # ("10" is a reasonable number), i.e. only consider the ten longest translations per lincRNA candidate, or else you can
                  # end up with 200 translations per candidate and pfam/tigrfam analyses which follow will take absolutely ages.
   
                  MAX_TRANSLATIONS_PER_GENE => 10,


                  # Where and how lincRNA candidates will be stored
                  # -----------------------------------------------

                  OUTPUT_DB => 'LINCRNA_OUTPUT_DB', 
                  OUTPUT_BIOTYPE => 'lincRNA_finder',  


                  # Debugging options  (You need to set the first two options even when you do NOT want debugging output)
                  # -----------------

                          # !!! The debugging process will categorise features/cDNAs/RNASeq models/H3 features depending on 
                          # !!! how they cluster (or don't) with one another and write the interesting cDNAs/RNASeq models/H3 features
                          # !!! into a separate database (the "DEBUG_OUTPUT_DB").  This will give you a record of the detailed results
                          # !!! from each stage of lincRNAFinder.

                          # !!! "Interesting" cDNAs will be flagged by hard-coded biotypes as the biotypes are quite self-explanatory. 
                          # !!! Here is a list of categories of cDNAs to be flagged:

                            # (pc = protein_coding)

                            # (1) cDNAs which overlap with pc genes ----------------------------------------------------------"cdna_update_protein-coding"

                            # (2) cDNAs not overlap with pc genes, overlap with *both* H3K4me3 and H3K36me3 ------------------"cdna_both_K4_K36"

                            # (3) cDNAs not overlap with pc genes, overlap with *either* H3K4me3 or H3K36me3 but not both ----"cdna_overlap_H3_not_pc"

                            #     *** (2) and (3) are mutually exclusive, depending on "CHECK_CDNA_OVERLAP_WITH_BOTH_K4_K36" above.

                            # (4) Potential lincRNA candidate cDNAs with long ORFs -------------------------------------------"long_translation"
                           
           
                          # !!! "Interesting" H3 features will be flagged by analysis logic_names of your choice as the categorisation is more complicated.
                          # !!! Moreover, we are NOT modifying biotypes of H3 feature "genes" because we want to keep their original biotypes, e.g. "H3K4me3",
                          # !!! to trace what type of feature it actually is (K4 or K36).  The "original" biotypes come from the analysis logic_names of 
                          # H3 simple_features when the H3 "genes" are created from simple_features before clustering starts.

                  WRITE_DEBUG_OUTPUT => 0,     # Set this to "0" to turn off debugging.

                  DEBUG_OUTPUT_DB    => 'LINCRNA_OUTPUT_DB',    # where debug output (if any) will be written to

                          # !!! no need to configure the two following options unless you want to change the default logic_names
                          # !!! of "interesting" H3 features to something else
                          # !!! ("LG" below stands for "logic_name", "pc" = protein_coding)

                  # logic_name for H3 features which do NOT cluster with cDNA/RNASeq models or protein_coding genes:
                  DEBUG_LG_EFG_UNCLUSTERED  => 'efg_NO_cdna_update_NO_pc', 
                                                                               
                  # logic_name for H3 features which cluster with cDNA/RNASeq models checked to be not overlapping with protein_coding genes:                                           
                  DEBUG_LG_EFG_CLUSTERING_WITH_CDNA => 'efg_cluster_non_pc_cdna_update',
                }, 

               lincrna => {},
            }
         );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
