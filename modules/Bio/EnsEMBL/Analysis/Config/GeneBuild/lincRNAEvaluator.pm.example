# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAEvaluator

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild:lincRNAEvaluator 

=head1 DESCRIPTION


=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::lincRNAEvaluator; 

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (

           LINCRNA_EVAL_CONFIG_BY_LOGIC => 
           {
              DEFAULT => {
 
                  # WHERE AND WHAT TO FETCH FOR lincRNA CANDIDATES AND VALIDATION GENES
                  #----------------------------------------------------------------------
 
                  LINCRNA_DB => { 
                                   # Format: database_alias => ['biotype_1', 'biotype_2']

                                   # Specify biotypes of genes to be fetched out of the lincRNAFinder output database.
                                   # You have to fetch *all* lincRNA genes, i.e. there is no need to pre-filter the lincRNAFinder output
                                   # to remove lincRNA candidates which contain protein features (pfam/tigfam), because the Evaluator code
                                   # will do the filtering.

                                   LINCRNA_OUTPUT_DB => ['lincRNA_finder','prot_feat'],  
                                },

                  VALIDATION_DBS => { 

                                   # Format: database_alias_1 => ['biotype_1', 'biotype_2'],
                                   #         databass_alias_2 => ['biotype_3', 'biotype_4'],

                                   # lincRNAs are "validated" if they do not overlap with Ensembl genes.

                                   # There is usually just one validation DB, and it will be the one with alias "SOURCE_PROTEIN_CODING_DB" 
                                   # (containing Ensembl core genes), which was also used in the lincRNAFinder stage.
                                   # Specify the biotype of Ensembl genes to be fetched here.  If all genes are to be fetched from the
                                   # validation DB, put down "fetch_all_biotypes" as the biotype, for it is an alias accepted by BaseGeneBuild
                                   # RunnableDB.

                                   SOURCE_PROTEIN_CODING_DB => ['fetch_all_biotypes'] ,
                                 },  


                  # OPTIONAL EVALUATION CRITERIA 
                  #------------------------------

                  # If your lincRNAFinder output contains single-exon lincRNA candidates and you want to remove
                  # them from analysis after all, turn on 'EXCLUDE_SINGLE_EXON_LINCRNAS'

                  EXCLUDE_SINGLE_EXON_LINCRNAS => 1,

                  # Some single-exon lincRNA candidates are disguised as two-exon ones containing short frameshift
                  # introns.  You can remove these candidates by turning on 'EXCLUDE_ARTEFACT_TWO_EXON_LINCRNAS'.
                  # Any introns of length longer than 'MAX_FRAMESHIFT_INTRON_LEN' will be regarded as non-frameshift/sane.
                
                  MAX_FRAMESHIFT_INTRON_LEN => 9,
                  EXCLUDE_ARTEFACT_TWO_EXON_LINCRNAS => 1,


                  # OUTPUT SETTINGS
                  #-----------------
 
                  # At the end of the lincRNA pipeline, there is a GeneBuilder step where all lincRNA "genes" (one-gene-
                  # one-transcript) are collapsed into proper Ensembl genes. You can control how many alternative
                  # spliceforms are allowed by changing "MAX_TRANSCRIPTS_PER_CLUSTER". The default value is 3, which is
                  # considerably lower than what's used for a conventional genebuild (set at 15).

                  MAX_TRANSCRIPTS_PER_CLUSTER => 3,

                  FINAL_OUTPUT_BIOTYPE => "lincRNA", 
                  FINAL_OUTPUT_DB      => 'LINCRNA_FINAL',   


                  # DEALING WITH lincRNAs WHICH OVERLAP WITH EXISTING PROCESSED_TRANSCRIPT GENES
                  # ------------------------------------------------------------------------------

                  # Possible actions are:
                  # (1) update the *gene* analysis AND biotype of all processed_transcripts which cluster with newly-identified lincRNAs.
                  #     This is useful if you want to copy your lincRNAs into a 'ready-to-go' core DB where all other types of genes
                  #     are properly annotated (i.e. gene and transcript biotypes and anlaysis logic_names standardised for public release).
                  # AND/OR
                  # (2) write the newly-identified lincRNAs into FINAL_OUTPUT_DB even when they overlap with processed_transcripts
                  #     This is useful for debugging purposes.
                  #                  
                  # For (1):
                  #
                  # Turn on 'MARK_OVERLAPPED_PROC_TRANS_IN_VALIDATION_DB'.  The overlapped proc_trans genes are expected to be in
                  # what's defined by 'UPDATE_SOURCE_DB'.
                  #
                  # Before the update is performed, the code checks that the sanity of processed_transcript genes and requires they 
                  # have analysis logic_names containing the string specified in 'PROC_TRANS_HAVANA_LOGIC_NAME_STRING' (usually "havana")
                  # because processed_transcript genes should only be from "havana" or "ensembl_havana_gene" analyses. 

                  # The analysis logic_name will be updated to what's defined in 'OVERLAPPED_GENES_NEW_MERGED_LOGIC_NAME'. 
                  # Make sure this analysis already exists in the DB defined by UPDATE_SOURCE_DB.
                  # The biotype will be updated to 'proc_trans_turned_lincRNA (hard-coded)'.
                
                  MARK_OVERLAPPED_PROC_TRANS_IN_VALIDATION_DB => 1,

                  PROC_TRANS_HAVANA_LOGIC_NAME_STRING => 'havana',

                  OVERLAPPED_GENES_NEW_MERGED_LOGIC_NAME => 'ensembl_havana_gene',
                
                  UPDATE_SOURCE_DB => 'SOURCE_PROTEIN_CODING_DB',

                  # For (2):
                  #
                  # Turn on 'WRITE_LINCRNAS_WHICH_CLUSTER_WITH_PROC_TRANS'.
                  #
                  # The lincRNAs written will have analysis logic_name just like any other lincRNAs generated by lincRNAEvaluator.
                  # The biotype will be hard-coded as 'lincRNA_clusters_with_proc_trans'.

                  WRITE_LINCRNAS_WHICH_CLUSTER_WITH_PROC_TRANS => 0,


                  # DEALING WITH lincRNAs WHICH OVERLAP WITH EXISTING lincRNA GENES
                  # ----------------------------------------------------------------

                  # Sometimes the VALIDATION DB contains existing lincRNAs from previous work.
                  # The lincRNAs identified in this analysis may overlap with existing lincRNAs. (They do not have to be
                  # identical.)
                  
                  # Possible actions are:
                  # (1) update the *gene* analysis AND biotype of all existing lincRNA genes which cluster with newly-identified lincRNAs;
                  # AND/OR
                  # (2) write the newly-identified lincRNAs into FINAL_OUTPUT_DB even when they overlap with existing lincRNAs

                  # For (1):
                  #
                  # Turn on 'MARK_EXISTING_LINCRNA_IN_VALIDATION_DB'. The overlapped existing lincRNA genes are expected to be in
                  # 'UPDATE_SOURCE_DB' (shared with proc_tran settings).
                  # The analysis logic_name will be updated to what's defined in "OVERLAPPED_GENES_NEW_MERGED_LOGIC_NAME" above.
                  # (Make sure this analysis already exists in the DB defined by "UPDATE_SOURCE_DB".)
                  # The biotype will be changed to "lincRNA_common" (hard-coded).

                  MARK_EXISTING_LINCRNA_IN_VALIDATION_DB => 1,

                  # For (2):
                  #
                  # Turn on 'WRITE_LINCRNAS_WHICH_CLUSTER_WITH_EXISTING_LINCRNAS'
                  # The lincRNAs written will have analysis logic_name just like any other lincRNAs generated by lincRNAEvaluator.
                  # The biotype will be hard-coded as "ncRNA_clusters_with_existing_lincRNA".

                  WRITE_LINCRNAS_WHICH_CLUSTER_WITH_EXISTING_LINCRNAS => 1,

   
                  # DEBUG OUTPUT WITH REJECTED lincRNAS
                  # ------------------------------------
                  # Turning on this option will write three categories of rejected lincRNAs into the FINAL_OUTPUT_DB:
                  #
                  #   (i) lincRNA candidates which are somehow assoicated with protein domains. They will be given biotype suffix "_reject_prot_dom";
                  #  (ii) lincRNAs which don't associate with protein domains but overlap with Ensembl gene of single biotype. They will be
                  #       given biotype suffix "_reject_single";
                  # (iii) lincRNAs which don't associate with protein domains but overlap with Ensembl genes of multiple biotypes. They will
                  #       be given biotype suffix "_reject_mult".
                
                  WRITE_REJECTED_NCRNAS => 0,  

                },  
                
                lincrna_evaluator => {} ,
            },  
         );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
