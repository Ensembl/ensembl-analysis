# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
#Additional config for creating the input IDs for running Exonerate2Genes 
#to align cDNA to genomic regions using the cDNA2Genome model and location 
#information from the latest cDNA update db
#Creates input IDs of a slice paired with an accession based on the input genes.
#Based on input genes having a single piece of supporting evidence
#IDs are written to the pipeline db
#
package Bio::EnsEMBL::Analysis::Config::GeneBuild::MakeCdna2GenomeRegionInputIDs;

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (

  CDNA2GENOME_REGION_CONFIG_BY_LOGIC => {

    #Specifies the extra config needed for making the input IDs
    DEFAULT => {
      PIPE_DB               => undef,# HASH-key out of Databases.pm
      GENE_DB               => undef,# HASH-key out of Databases.pm
      SUBMIT_LOGIC_NAME     => undef,#logic name supplied as condition for running exonerate and output for input IDs
      EXPANSION             => 2000, #expand slice around gene by this amount
      ANNOTATION            => undef,#path to annotation file
      #if specified will check that the accession's sequence can be found in the index
      #if accession is not present in index, no input ID will be created
      SEQFETCHER_OBJECT     => 'Bio::EnsEMBL::Analysis::Tools::SeqFetcher::OBDAIndexSeqFetcher',
      SEQFETCHER_PARAMS     => {
        -db => ['/path/to/dir/containing/index/'],
      },
      #can specify which genes to use by type and logic
      #if both biotype and logic name are specified 
      #genes need to match a biotype AND a logic name
      #if not specified all genes will be used
      GENE_BIOTYPES         => [''],
      GENE_LOGIC_NAMES      => [''],
    },

    Create_submit_exonerate => {
      PIPE_DB               => "REFERENCE_DB",# HASH-key out of Databases.pm
      GENE_DB               => "CDNA_DB",# HASH-key out of Databases.pm
      SUBMIT_LOGIC_NAME     => 'Submit_exonerate',#logic name supplied as condition for running exonerate and output for input IDs
      ANNOTATION            => '/path/to/file/with/cdna/annotation/if/using/cdna2genome',
    },

  }
);

sub import {
  my ($callpack) = caller(0);    # Name of the calling package
  my $pack = shift;              # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys(%Config);
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join( ' ', map { '$' . $_ } @vars ) . ")";
  die $@ if $@;

  foreach (@vars) {
    if ( defined $Config{$_} ) {
      no strict 'refs';
      # Exporter does a similar job to the following
      # statement, but for function names, not
      # scalar variables:
      *{"${callpack}::$_"} = \$Config{$_};
    } else {
      die "Error: Config: $_ not known\n";
    }
  }
} ## end sub import

1;

