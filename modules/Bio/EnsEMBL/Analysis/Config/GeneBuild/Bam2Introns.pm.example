1;
# package Bio::EnsEMBL::Analysis::Config::GeneBuild::Bam2Introns
# 
# Cared for by EnsEMBL (ensembl-dev@ebi.ac.uk)
#
# Copyright GRL & EBI
#
# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::Bam2Introns

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild::Bam2Introns

=head1 DESCRIPTION

This contains the specific configuraton for 
Bio::EnsEMBL::Analysis::RunnableDB::Bam2Introns and 
Bio::EnsEMBL::Analysis::RunnableDB::Bam2IntronsTranscript

=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::Bam2Introns;

use strict;
use vars qw( %Config );

%Config = (
  BAM2INTRONS_CONFIG_BY_LOGIC =>  {
            DEFAULT =>  {
             ##############################################
             # Write out the alignments in SAM / BAM format
	     # specify the path to an output directory here 
	     # files will be created as input_id.sam 
	     OUT_SAM_DIR => '/path/to/directory',   
	     
	     # dont allow more then X % missmatches ie a number of 6%  = 2 missmatches on a 35 bp read
	     # and 4 missmatches on a 75 bp read etc..
	     MISSMATCH => 6,
	     
             # Database to fetch the trancripts from
             TRANSDB => '',
	     
	     # Loaction of BAM file containg the genomic alignments
	     BAM_FILE  => '/path/to/my/sorted/indexed/bam_file.bam',
	     
	     # Exonerate word length, smaller = more accurate takes longer
	     WORD_LENGTH => '10 ',
	     
	     # repeat masks the transcript sequences - quick but you might miss something
	     MASK => '0',
	     
	     # length of the reads to fetch
	     READ_LENGTH => '',
	     
	     # use the full genomic sequence rather than just the transcript sequence
	     FULLSEQ   => 1,
	     
	     # maximum (genomic) length roughmodel for using fullseq, any larger and it will switch
	     # to transcript seq to save CPU and mem
	     MAX_TRANSCRIPT => 1000000,
	     
	     # number of reads to align in each batch
	     BATCH_SIZE => 100000,
       	     },
     }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
