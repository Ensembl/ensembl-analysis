# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package Bio::EnsEMBL::Analysis::Config::GeneBuild::BuildChecks;

use strict;
use vars qw( %GeneBuilder );

# Hash containing config info
%GeneBuilder = (				
		# introns smaller than this could be real due to framshifts
		MINSHORTINTRONLEN    => 7, 
		
		# introns between smaller than this is considered too short
		MAXSHORTINTRONLEN    => 10, 
		
                # introns longer than this are too long
		MINLONGINTRONLEN     => 100000, 
		
		# exons smaller than this could be real due to framshifts
		MINSHORTEXONLEN      => 3, 
		
		# exons shorter than this are too short
		MAXSHORTEXONLEN      => 10, 
		
		# exons longer than this are probably too long
		MINLONGEXONLEN       => 5000, 
		
		MINTRANSLATIONLEN    => 10, 

		MAX_EXONSTRANSCRIPT  => 150, 

		MAXTRANSCRIPTS       => 10, 
		MAXGENELEN           => 2_000_000, 

		IGNOREWARNINGS       => 1, 	    

	       );

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_
  
  # Get list of variables supplied, or else
  # all of GeneBuilder:
  my @vars = @_ ? @_ : keys( %GeneBuilder );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $GeneBuilder{ $_ } ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$GeneBuilder{ $_ };
	} else {
	    die "Error: GeneBuilder: $_ not known\n";
	}
    }
}

1;
