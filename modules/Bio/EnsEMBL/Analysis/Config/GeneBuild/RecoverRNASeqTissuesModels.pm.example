

=head1 LICENSE
# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 CONTACT

  Please email comments or questions to the public Ensembl
  developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.

  Questions may also be sent to the Ensembl help desk at
  <http://www.ensembl.org/Help/Contact>.

=cut

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::TranscriptConsensus

=head1 SYNOPSIS

    Bio::EnsEMBL::Analysis::Config::GeneBuild::TranscriptConsensus ;
    Bio::EnsEMBL::Analysis::Config::GeneBuild::TranscriptConsensus qw () ;

=head1 DESCRIPTION


TranscriptConsensus-Configuration

This is the main configuration file for TranscriptConsensus, a perl
module which generate consensus genes from different sources (EST-genes are
combined with other EST-genes and Similarity-Genewise-genes or
ab-initio-predictions (i.e. fgenesh, Genscan, GeneFinder ...) .

TranscriptConsensus fetches genes and prediction_transcripts by it's
biotype (for Bio::EnsEMBL::Gene-objects) and by it's logic_name
(for Bio::EnsEMBL::PredictionTranscript-objects). These biotypes/
logic_names are defiend in this configuration-file. Each biotype/
logic_name has to belong to a different evidence_set. (see below).

The parameters to connect to various databases are defined in

  - modules/Bio/EnsEMBL/Analysis/Config/Databases.pm

The general function of this config file is to import  a number of
standard global variables into the calling package. Without arguments
all the standard variables are set, and with a list, only those variables
whose names are provided are set.  The module will die if a variable
which doesn\'t appear in its C<%Config> hash is asked to be set.

The variables can also be references to arrays or hashes.

Edit C<%Config> to add or alter variables.

All the variables are in capitals, so that they resemble environment
variables.

=cut

package Bio::EnsEMBL::Analysis::Config::GeneBuild::RecoverRNASeqTissuesModels;

use strict;
use vars qw(%Config);

%Config= (

    RECOVER_RNASEQ_MODELS_CONFIG_BY_LOGIC => {

        DEFAULT => {
            # set the verbosity level
            VERBOSE => 0,

            # Values between START and END shouldn't be changed
            # unless you know what you are doing
            ## START ##
            CODING_ONLY      => 0,
            IGNORE_STRAND    => 0,
            CHECK_FRAMESHIFT => 0,
            CHECK_STOP       => 0,

            CHECK_TWOWAY => 1,
            CHECK_SINGLE => 1,
            CHECK_ORPHAN => 1,
            ## END ##

            # If the value of the biotype is '', it's not changed
            # Otherwise it is concatenated to the original one
            # biotype of good genes
            DELETE_BIOTYPE => 'deleted',
            SINGLE_BIOTYPE => 'single',
            ORPHAN_BIOTYPE => 'orphan',

            # If GOOD_BIOTYPE is set, it will overwrite the biotypes
            # unless it is a "deleted model"
            GOOD_BIOTYPE => 'best',

            MERGED_SET_DATABASE => ['REFINE_MERGED_DB'],
            MERGED_UNIPROT_DATABASE => 'MERGED_UNIPROT_DB',

            # list of biotypes to be fetched from the databases
            # If the arrayref is empty, fetch all
            MERGED_BIOTYPES => {
                REFINE_MERGED_DB => [],
            },
            TISSUES_SET_DATABASE => ['REFINE_TISSUES_DB'],
            TISSUES_UNIPROT_DATABASE => 'TISSUES_UNIPROT_DB',

            # list of biotypes to be fetched from the databases
            # If the arrayref is empty, fetch all
            TISSUES_BIOTYPES => {
                REFINE_TISSUES_DB => [],
            },
            OUTPUT_DATABASE => 'RECOVER_RNASEQ_DB',

            INTRON_BAM_FILE => '/path/to/your/merged/intron/file.bam',

            # It is supposed to be the number of tissues you have for your species.
            # If the recovered model has less than half of NUM_GROUPS of tissues to
            # support it, the biotype will contain 'low'
            NUM_GROUPS      => 50,
            # Modifies the merge model score 
            # Useful to remove merged models with the last/first intron poorly supported
            # Set it higher to favor the merge model
            INTRON_ALLOWANCE      => 23,
            # When 2 tissue model have a deep 'coverage', use the longest translation if
            # score_less_deep > score_deeper*ABUNDANCE_THRESHOLD
            ABUNDANCE_THRESHOLD      => 0.65,
        },
    }
);


sub import {
    my ($callpack) = caller(0); # Name of the calling package
    my $pack = shift; # Need to move package off @_

    # Get list of variables supplied, or else all
    my @vars = @_ ? @_ : keys(%Config);
    return unless @vars;

    # Predeclare global variables in calling package
    eval "package $callpack; use vars qw("
         . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if (defined $Config{ $_ }) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
