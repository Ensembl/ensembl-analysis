1;

# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::ProjectedTranscriptEvidence

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild::ProjectedTranscriptEvidence

=head1 DESCRIPTION
Supplies config for Bio::EnsEMBL::Analysis::RunnableDB::ProjectedTranscriptEvidence,
which is used to align a projected transcript against the original and add the original 
transcript as a transcript_supporting_feature of the projected transcript.


=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::ProjectedTranscriptEvidence;

use strict;
use vars qw( %Config );

%Config = (
  PROJECTED_TRANSCRIPT_EVIDENCE_CONFIG_BY_LOGIC =>  {
            DEFAULT =>  {
              #Database to fetch the original/reference genes from
              GENEDB    => 'REFERENCE_DB',
              #Database the projected (transformed) genes were written to
              #where original transcript will be added as a transcript_supporting_feature
	            OUTGENEDB => 'PROJECT_DB',
              OPTIONS   => '--model affine:local --bestn 1 --dnahspthreshold 50 -w 1 -s 0',
              PROGRAM   => "exonerate-0.9.0",
       	    },

     }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
