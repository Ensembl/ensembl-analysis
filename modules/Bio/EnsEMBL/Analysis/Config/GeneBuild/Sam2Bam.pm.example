# package Bio::EnsEMBL::Analysis::Config::GeneBuild::Sam2Bam
# 
# Cared for by EnsEMBL (dev@ensembl.org)
#
# Copyright GRL & EBI
#
# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code


package Bio::EnsEMBL::Analysis::Config::GeneBuild::Sam2Bam;

use strict;
use vars qw( %Config );

%Config = (
  SAM2BAM_CONFIG_BY_LOGIC =>  {
            DEFAULT =>  {
	      # directory containg the sam file(s)
	      SAM_DIR => '/path/to/directory',
	      
	      # path to the bam file to produce as output
	      BAMFILE => '/path/to/my/SAM/file/introns.sam',
	      
	      # regex to identify which SAM files to merge
	      REGEX => '.sam',
	      
              # file containing all the readgroup headers used in the alignments (optional)
              HEADERFILE => '/path/to/my/header/file/headers.txt',
              
	      # path to dumped genome file used for the alignment
	      # it will make an index for it if one does not already exist
	      GENOMEFILE => '/path/to/my/genome/file.fa',  
            },	
	 }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
