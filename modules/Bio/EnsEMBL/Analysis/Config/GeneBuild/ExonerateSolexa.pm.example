1;
# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::ExonerateSolexa

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild::ExonerateSolexa

=head1 DESCRIPTION

This contains the specific configuraton for 
Bio::EnsEMBL::Analysis::RunnableDB::ExonerateSolexa and 
Bio::EnsEMBL::Analysis::RunnableDB::ExonerateSolexaTranscript

=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::ExonerateSolexa;

use strict;
use vars qw( %Config );

%Config = (
  EXONERATE_SOLEXA_CONFIG_BY_LOGIC =>  {
            DEFAULT =>  {
             # The database connections used are defined in 
             # Bio::EnsEMBL::Analysis::Config::GeneBuild::Databases
             # Single Database to write the output features into
             OUT_DB   => undef,  # SOLEXA_STAGE_3
	     # Alternately an array of databases to write into, saves the individual databases getting too slow
             OUT_DBS   =>  => [],

             # Compress identical dna align features
             COMPRESSION => '0',

             # Solexa reads are paired end reads
             PAIREDEND => '',
             
             # pair the features if they are paired end
             PAIR => '',
              
             # If we are pairing features what is the maximum sized gap between them
             PAIREDGAP => '200000',
	     
	     # dont allow more then X % missmatches ie a number of 6%  = 2 missmatches on a 35 bp read
	     # and 4 missmatches on a 75 bp read etc..
	     MISSMATCH => 6,
	                 
             # Specific config for ExonerateSolexaTranscript
             ##############################################
             # Project onto the genome ( generally this is kind of the point )
             PROJECT => '1',
             # Database to fetch the trancripts from
             TRANSDB => '',
             # Biotype of the transcripts to fetch ( if left blank all transcripts are fetched )
              TRANSCRIPT_BIOTYPE => 'protein_coding' , 
             # If set to 1 only reads supporting introns will be written to the database 
             INTRON_MODELS => '1',
	     # Reads must cross an intron bounday by at least this many bases
	     INTRON_OVERLAP => '9',
       	     },

             lane1_rough_intron => {
                                    PAIR      =>  '0',
                                    TRANSCRIPT_BIOTYPE   =>  'lane1_rough', # biotype of the transcripts in the TRANSDB database 
                                   },

     }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
