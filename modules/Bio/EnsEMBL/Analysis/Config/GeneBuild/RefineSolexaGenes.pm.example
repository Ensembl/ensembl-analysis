# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package Bio::EnsEMBL::Analysis::Config::GeneBuild::RefineSolexaGenes;

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (

         REFINESOLEXAGENES_CONFIG_BY_LOGIC => 
           {
            DEFAULT => {
	    		# databases are defined as hash keys from Bio::EnsEMBL::Analysis::Config::Databases
                        OUTPUT_DB => '',
			# intron db is not needed if you are using BAM files
			INTRON_DB => '',
			MODEL_DB  => '',

                        # Using bam files to fetch intron features overrides the INTRON_DB
			# An array of BAM files each with associated config
  	                INTRON_BAM_FILES => [
			  {
		    	  # location of the bam file
			  FILE => "/path/to/introns/bamfile",
			  # does the bam file(s) contain a mixture of spliced and unspliced reads such as you might get using Gsnap?
			  MIXED_BAM => "0",
			  # only take introns above this depth
			  DEPTH => "0",
			  # return only reads from the specified read groups
	               	  GROUPNAME => [],
			  },
			  # additional bam files can be specified if needed
		        ],

			# write the intron features into the OUTPUT_DB along with the models
			WRITE_INTRONS => 1,
			
			# maximum number of times to loop when building all possible paths through the transcript
			MAX_RECURSIONS => 100000,
						
			# analysis logic_name for the dna_align_features to fetch from the INTRON_DB
			# If left blank all features will be fetched
			LOGICNAME => [],
					
			# logic name of the gene models to fetch
			MODEL_LN  => '',
			
			# penalty for removing a retined intron
			RETAINED_INTRON_PENALTY => 2,
			
            #Remove introns that overlap X introns
            FILTER_ON_OVERLAP => 0,

			# minimum size for an intron
			MIN_INTRON_SIZE  => 30,   
			MAX_INTRON_SIZE  => 200000,  
			
			# biotype to give to single exon models if left blank single exons are ignored
			SINGLE_EXON_MODEL => 'single_exon',
		
			# minimum single exon size (bp)
			MIN_SINGLE_EXON => 1000,
		
			# minimum percentage of single exon length that is coding
			SINGLE_EXON_CDS => 66,
			
			# Intron with most support determines the splice sites for an internal exon
			# lower scoring introns with different splice sites are rejected
			
			STRICT_INTERNAL_SPLICE_SITES => 1,
			
			# In some species alternate splice sites for end exons seem to be common
			STRICT_INTERNAL_END_EXON_SPLICE_SITES => 1,
			
			# biotypes to give gene models if left blank these models will not get written to the output database
			# best score - model with most supporting intron features
			BEST_SCORE => 'best', 
			# all other possible models
			OTHER_ISOFORMS => '',
                        # max number of other models to make - blank = all 
			OTHER_NUM      => '10',
			
                        # max number of other models to process - blank = all 
			MAX_NUM      => '1000',
			
			# biotype to label bad models ( otherwise they are not written )
			BAD_MODELS     => '',

			# do you want to trim UTR
			TRIM_UTR => 1,
			# config for trimming UTR
			MAX_3PRIME_EXONS => 2,
			MAX_3PRIME_LENGTH => 5000,
			MAX_5PRIME_EXONS => 3,
			MAX_5PRIME_LENGTH => 1000,
			# % of average intron score that a UTR intron must have
			REJECT_INTRON_CUTOFF => 5,
                   },
	   }
	    
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
