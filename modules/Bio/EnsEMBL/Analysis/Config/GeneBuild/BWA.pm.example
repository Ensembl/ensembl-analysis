# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::BWA

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild::BWA

=head1 DESCRIPTION

This contains the specific configuraton for 
Bio::EnsEMBL::Analysis::RunnableDB::BWA and 
Bio::EnsEMBL::Analysis::RunnableDB::BWA2BAM

=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::BWA;

use strict;
use vars qw( %Config );

%Config = (
  BWA_CONFIG_BY_LOGIC =>  {
            DEFAULT =>  {

	      # base path to the fastq
	      INDIR => "/path/to/my/input",	
	      
	      # path to the output directory
	      OUTDIR => "/path/to/my/output",	
			      
	      # path to dumped genome file used for the alignment
	      # it will make an index for it if one does not already exist
	      GENOMEFILE => "/path/to/my/genome/file.fa",
	      
	      # alignment options ( just for example )
	      OPTIONS => "-n 20 -i 75",
	      
	      # options for BWA2BAM
	      #####################
	          
	      # are the reads paired end? (1/0)
	      PAIRED => "0",
       
       	      # parameters for sampe ( BWA paired alignment processing ) 
              SAMPE_OPTIONS => "-A -a 200000",
	      
	      #paramteres for samse ( BWA unpaired alignment processing)
	      SAMSE_OPTIONS => "",
	      
	      # path to the samtools binaries
	      SAMTOOLS_PATH => "/software/solexa/bin/samtools",

              # optional header with additional information describing the sample
              HEADER => "/path/to/my/SAM/header/file.txt",
              MIN_MAPPED => 50,
              MIN_PAIRED => 50,
            },	
     }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
