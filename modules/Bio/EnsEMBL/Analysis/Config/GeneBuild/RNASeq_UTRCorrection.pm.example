# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# POD documentation - main docs before the code

=head1 NAME

Bio::EnsEMBL::Analysis::Config::GeneBuild::RNASeq_UTRCorrection

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::GeneBuild::RNASeq_UTRCorrection

=head1 DESCRIPTION

This contains the specific configuraton for
Bio::EnsEMBL::Analysis::RunnableDB::RNASeq_UTRCorrection and
Bio::EnsEMBL::Analysis::RunnableDB::RNASeq_UTRCorrection

=head1 CONTACT

=cut


package Bio::EnsEMBL::Analysis::Config::GeneBuild::RNASeq_UTRCorrection;

use strict;
use vars qw( %Config );

%Config = (
    RNASEQ_UTRCORRECTION_CONFIG_BY_LOGIC =>  {
        DEFAULT =>  {
            # Location of BAM file containg the genomic alignments
            BAM_FILE  => '/path/to/my/sorted/indexed/bam_file.bam',

            # Database containing genes with utr to improve
            GENES_DB => 'RNASEQBLAST_DB',

            OUTPUT_DB => 'BETTERUTR_DB',

            # Filtering of the genes to fetch based on logic_name, source, biotype
            # It has to be UNDEF if you want NO filtering
            LOGIC_NAME => undef,
            SOURCE => undef,
            BIOTYPE => undef,
        },
    }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
