# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

  Bio::EnsEMBL::Analysis::Config::Funcgen::SWEmbl

=head1 SYNOPSIS

  use Bio::EnsEMBL::Analysis::Config::Funcgen::SWEmbl;
  
  use Bio::EnsEMBL::Analysis::Config::Funcgen::SWEmbl qw(CONFIG);

=head1 DESCRIPTION

This is a module needed to provide configuration for the
SWEmbl RunnableDBs.

CONFIG is an hash of hashes which contains analysis specific
settings and is keyed on logic_name

=head1 AUTHOR

Stefan Graf, Ensembl Functional Genomics - http://www.ensembl.org/

=head1 CONTACT

Post questions to the Ensembl development list: http://lists.ensembl.org/mailman/listinfo/dev

=cut

package Bio::EnsEMBL::Analysis::Config::Funcgen::SWEmbl;
use Bio::EnsEMBL::Funcgen::DBSQL::DBAdaptor;
use strict;
use vars qw(%Config @RUNNABLE_CONFIG);
require "$ENV{'WORK_DIR'}/runnable_config.pm";

%Config = 
    (
     CONFIG => {
         DEFAULT => {
		       	DNADB => {
						  -dbname          => $ENV{'DNADB_NAME'},
						  -host            => $ENV{'DNADB_HOST'},
						  -port            => $ENV{'DNADB_PORT'} || 3306,
						  -species         => $ENV{'SPECIES'},
						  -user            => $ENV{'DNADB_USER'},
						  -pass            => $ENV{'DNADB_PASS'},
						  -multispecies_db => $ENV{'DNADB_MULTISPECIES_DB'},
						  -species_id      => $ENV{'DNADB_SPECIES_ID'}
						 },
				EFGDB => {
						  -dbname          => $ENV{'DB_NAME'},
						  -host            => $ENV{'DB_HOST'},
						  -port            => $ENV{'DB_PORT'} || 3306,
						  -species         => $ENV{'SPECIES'},
						  -user            => $ENV{'DB_USER'},
						  -multispecies_db => $ENV{'MULTISPECIES_DB'},
						  -species_id      => $ENV{'SPECIES_ID'},
						  -pass            => $ENV{'DB_PASS'},
						 }, 


             MODULE            => 'SWEmbl',
             PROGRAM           => 'SWEmbl',
             PROGRAM_FILE      => 'SWEmbl',
			 	 DISPLAY_LABEL     => 'SWEmbl',
					 #DESCRIPTION       => '';
             VERSION           => '2008-08-03',
             #PARAMETERS        => "-f 150 -m 8 -p 0.04 -P 0.5 -d 70",
             #NORM_METHOD       => $ENV{'NORM_METHOD'},
             RESULT_SET_REGEXP => '_IMPORT',
             ANALYSIS_WORK_DIR =>  $ENV{PIPELINE_OUT},
	     HAS_CONTROL => 0,
         },
         
		 #'SWEmbl_default' => {
         #    PARAMETERS        => "-f 150 -R 0.0025",
		 #
		 #			          },

		 
	@RUNNABLE_CONFIG,	
     });

sub import {
    my ($callpack) = caller(0); # Name of the calling package
    my $pack = shift; # Need to move package off @_
    
    # Get list of variables supplied, or else all
    my @vars = @_ ? @_ : keys(%Config);
    return unless @vars;
    
    # Predeclare global variables in calling package
    eval "package $callpack; use vars qw("
        . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;
    
    
    foreach (@vars) {
        if (defined $Config{ $_ }) {
            no strict 'refs';
            # Exporter does a similar job to the following
            # statement, but for function names, not
            # scalar variables:
            *{"${callpack}::$_"} = \$Config{ $_ };
        } else {
            die "Error: Config: $_ not known\n";
        }
    }
}

1;
