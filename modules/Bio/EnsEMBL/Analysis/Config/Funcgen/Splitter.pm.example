# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

  Bio::EnsEMBL::Analysis::Config::Funcgen::Splitter

=head1 SYNOPSIS

  use Bio::EnsEMBL::Analysis::Config::Funcgen::Splitter;
  
  use Bio::EnsEMBL::Analysis::Config::Funcgen::Splitter qw(CONFIG);

=head1 DESCRIPTION

This is a module needed to provide configuration for the 
Splitter RunnableDBs.

CONFIG is an hash of hashes which contains analysis specific
settings and is keyed on logic_name

=head1 LICENCE

This code is distributed under an Apache style licence. Please see
http://www.ensembl.org/info/about/code_licence.html for details.

=head1 AUTHOR

Stefan Graf, Ensembl Functional Genomics - http://www.ensembl.org/

=head1 CONTACT

Post questions to the Ensembl development list: http://lists.ensembl.org/mailman/listinfo/dev

=cut

package Bio::EnsEMBL::Analysis::Config::Funcgen::Splitter;
use strict;
use vars qw(%Config);

%Config = 
    (
     CONFIG => {
         DEFAULT => {
             DNADB => {
                 -dbname => $ENV{'CORE_DBNAME'},
                 -host => $ENV{'CORE_HOST'},
                 -port => $ENV{'CORE_PORT'} || 3306,
                 -species => $ENV{'SPECIES'},
                 -user => $ENV{'CORE_USER'},
             },
             EFGDB => {
                 -dbname => $ENV{'EFG_DBNAME'},
                 -host => $ENV{'EFG_HOST'},
                 -port => $ENV{'EFG_PORT'} || 3306,
                 -species => $ENV{'SPECIES'},
                 -user => $ENV{'EFG_WRITE_USER'},
                 -pass => $ENV{'PASS'},
             },
             MODULE            => 'Splitter',
             PROGRAM           => 'Splitter',
             PROGRAM_FILE      => 'splitter.cgi',
             VERSION           => '0.1',
             #PARAMETERS        => "'norm=none' 'combine=median' 'cutoff=2sd' 'maxgap=100' 'minrun=4'",
             NORM_METHOD       => $ENV{NORM_METHOD},
             RESULT_SET_REGEXP => '_IMPORT',
             ANALYSIS_WORK_DIR => $ENV{ANALYSIS_WORK_DIR},
         },
#         Splitter_default => {
#             PARAMETERS        => "'norm=none' 'combine=median' 'cutoff=2sd' 'maxgap=100' 'minrun=4'",
#         }
     });

sub import {
    my ($callpack) = caller(0); # Name of the calling package
    my $pack = shift; # Need to move package off @_
    
    # Get list of variables supplied, or else all
    my @vars = @_ ? @_ : keys(%Config);
    return unless @vars;
    
    # Predeclare global variables in calling package
    eval "package $callpack; use vars qw("
        . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;
    
    
    foreach (@vars) {
        if (defined $Config{ $_ }) {
            no strict 'refs';
            # Exporter does a similar job to the following
            # statement, but for function names, not
            # scalar variables:
            *{"${callpack}::$_"} = \$Config{ $_ };
        } else {
            die "Error: Config: $_ not known\n";
        }
    }
}

1;
