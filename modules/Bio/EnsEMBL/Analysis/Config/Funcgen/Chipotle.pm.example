# Ensembl module for Bio::EnsEMBL::Analysis::Config::Funcgen::Chipotle
#
# Copyright (c) 2007 Ensembl
#

=head1 NAME

  Bio::EnsEMBL::Analysis::Config::Funcgen::Chipotle

=head1 SYNOPSIS

  use Bio::EnsEMBL::Analysis::Config::Funcgen::Chipotle;
  
  use Bio::EnsEMBL::Analysis::Config::Funcgen::Chipotle qw(CONFIG);

=head1 DESCRIPTION

This is a module needed to provide configuration for the
Chipotle RunnableDBs.

BLAST_CONFIG is an hash of hashes which contains analysis specific
settings and is keyed on logic_name

=head1 AUTHOR

This module was created by Stefan Graf. It is part of the 
Ensembl project: http://www.ensembl.org/

=head1 CONTACT

Post questions to the Ensembl development list: ensembl-dev@ebi.ac.uk

=cut

package Bio::EnsEMBL::Analysis::Config::Funcgen::Chipotle;

use strict;
use vars qw(%Config);


%Config = 
    (
     CHIPOTLE_CONFIG =>{
         DEFAULT => {
             PROGRAM => 'chipotle.pl',
             OPTIONS => 
                 ' --model gauss'.
                 ' --window 990'.
                 ' --step 150'.
                 ' --correction BH'.
                 ' --alpha 0.05',
                 #' --dolog2'.
                 #' --transform 0'
             LOGIC_NAME => 'Chipotle',
             EFG_EXPERIMENT => 'HeLaS3_FAIRE_WholeGenome',
                              #'H3K4me3-GM06990', # Sanger
                              #'Stunnenberg_all_OID_1963'
             EFG_ANALYSIS =>   'VSN_GLOG',
                              #'SangerPCR',
             EFG_FT_NAME => 'FAIRE',
             EFG_FT_CLASS => 'Regulatory Elements',
             EFG_CT_NAME => 'HeLaS3',
             }
     });

sub import {
    my ($callpack) = caller(0); # Name of the calling package
    my $pack = shift; # Need to move package off @_
    
    # Get list of variables supplied, or else all
    my @vars = @_ ? @_ : keys(%Config);
    return unless @vars;
    
    # Predeclare global variables in calling package
    eval "package $callpack; use vars qw("
        . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;
    
    
    foreach (@vars) {
        if (defined $Config{ $_ }) {
            no strict 'refs';
            # Exporter does a similar job to the following
            # statement, but for function names, not
            # scalar variables:
            *{"${callpack}::$_"} = \$Config{ $_ };
        } else {
            die "Error: Config: $_ not known\n";
        }
    }
}

1;
