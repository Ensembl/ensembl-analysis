=head1 LICENSE

  Copyright (c) 1999-2011 The European Bioinformatics Institute and
  Genome Research Limited.  All rights reserved.

  This software is distributed under a modified Apache license.
  For license details, please see

    http://www.ensembl.org/info/about/code_licence.html

=head1 CONTACT

  Please email comments or questions to the public Ensembl
  developers list at <dev@ensembl.org>.

  Questions may also be sent to the Ensembl help desk at
  <helpdesk@ensembl.org>.

=cut

=head1 NAME

Bio::EnsEMBL::Analysis::Config::ExonerateCloneEnds - 

=head1 SYNOPSIS

use Bio::EnsEMBL::Analysis::Config::ExonerateCloneEnds;

=head1 DESCRIPTION


=head1 METHODS

=cut


package Bio::EnsEMBL::Analysis::Config::ExonerateCloneEnds;

use strict;
use vars qw( %Config );

%Config = (
  CLONE_CONFIG => {
    DEFAULT => {
      
      GENOMICSEQS =>   undef, #allowed to be a dir.
      QUERYTYPE   => 'dna',

      # must be a single file containing all clone fasta sequences

      QUERYSEQS   => undef,

      # must supply one, since the queryseqs MUST be a single file 
      IIDREGEXP   => undef,
      DNADB => {
        -dbname   => 'homo_sapiens_core_37_35j',
        -host     => 'ecs2',
        -port     => '3364',
        -user     => 'ensro',
        -pass     => '',
        },
      CHUNKSLIST  => '/ecs2/scratch2/jb16/sheep/listOfChunks.txt',
      OPTIONS     => '--model affine:local --refine full --gapopen -8 --gapextend -2 --bestn 1  --dnawordlen 12 --softmasktarget TRUE --score 300',
    },
    Map_Clone_Ends => {
      
      GENOMICSEQS =>   undef, #allowed to be a dir.
      QUERYTYPE   => 'dna',

      # must be a single file containing all clone fasta sequences

      QUERYSEQS   => undef,

      # must supply one, since the queryseqs MUST be a single file 
      IIDREGEXP   => undef,
      DNADB => {
        -dbname   => 'homo_sapiens_core_37_35j',
        -host     => 'ecs2',
        -port     => '3364',
        -user     => 'ensro',
        -pass     => '',
        },
      CHUNKSLIST  => '/ecs2/scratch2/jb16/sheep/listOfChunks.txt',
      OPTIONS     => '--model affine:local --refine full --gapopen -8 --gapextend -2 --bestn 1  --dnawordlen 12  --softmasktarget TRUE --score 300',
    },
     EXONERATE_CLONE_ENDS => {

      # path to softmasked, dusted sequence on the farm 
      #
 
      GENOMICSEQS  => '/data/blastdb/Ensembl/Human/NCBI35/softmasked_dusted', #allowed to be a dir.    
      QUERYTYPE    => 'dna',

      # must be a single file containing all clone fasta sequences

      QUERYSEQS    => '/ecs2/scratch2/jb16/sheep/sheep_clones_clean.fa',

      # must supply one, since the queryseqs MUST be a single file 
      IIDREGEXP    => '(\d+):(\d+)',
      DNADB => {
        -dbname => 'homo_sapiens_core_37_35j',
        -host   => 'ecs2',
        -port   => '3364',
        -user   => 'ensro',
        -pass   => '',
        },
      OUTDB => {
        -dbname => 'user_sheep_human_clones',
        -host   => 'ia64g',
        -port   => '3306',
        -user   => 'ensadmin',
        -pass   => 'ensembl',
        },
      SEQFETCHDB  => '/ecs2/scratch2/jb16/sheep/sheep_clones_clean_idx',
      OPTIONS   => '--bestn 10  --dnawordlen 12 --softmasktarget TRUE --score 100',
    },
    REFINE_CLONE_ENDS => {
  
      GENOMICSEQS  =>   '/data/blastdb/Ensembl/Human/NCBI35/softmasked_dusted', #allowed to be a dir.
      QUERYTYPE    => 'dna',

      # must be a single file containing all clone fasta sequences

      QUERYSEQS    => '/ecs2/scratch2/jb16/sheep/sheep_clones_clean.fa',

      # must supply one, since the queryseqs MUST be a single file 
      IIDREGEXP    => '(\w+):([\w_\.]+):([\w\.]+):([-\w]+):([-\w]+):([-\w]+):(\w+)',
      DNADB => {
        -dbname => 'homo_sapiens_core_37_35j',
        -host   => 'ecs2',
        -port   => '3364',
        -user   => 'ensro',
        -pass   => '',
        },
      OUTDB => {
        -dbname => 'user_sheep_human_clones',
        -host   => 'ia64g',
        -port   => '3306',
        -user   => 'ensadmin',
        -pass   => 'ensembl',
        },
      SEQFETCHDB  => '/ecs2/scratch2/jb16/sheep/sheep_clones_clean_idx',
      OPTIONS   => '--model affine:local --refine full --gapopen -12 --gapextend -2 --bestn 1  --dnawordlen 12 --softmasktarget TRUE --score 100',
    },
  }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;
  
  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;


    foreach (@vars) {
	if ( defined $Config{$_} ) {
            no strict 'refs';
	    # Exporter does a similar job to the following
	    # statement, but for function names, not
	    # scalar variables:
	    *{"${callpack}::$_"} = \$Config{ $_ };
	} else {
	    die "Error: Config: $_ not known\n";
	}
    }
}

1;
