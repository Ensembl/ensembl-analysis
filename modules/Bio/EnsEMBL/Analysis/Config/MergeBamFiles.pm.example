=head1 LICENSE

# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 NAME

    Bio::EnsEMBL::Analysis::Config::MergeBamFiles

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::MergeBamFiles;

=head1 DESCRIPTION



=head1 CONTACT

    Please email comments or questions to the public Ensembl
    developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.

    Questions may also be sent to the Ensembl help desk at
    <http://www.ensembl.org/Help/Contact>.

=cut


package Bio::EnsEMBL::Analysis::Config::MergeBamFiles;

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (
    MERGE_BAM_FILES_BY_LOGIC => {
        DEFAULT => {

        JAVA       => 'java',
        JAVA_OPTIONS  => '-Xmx2g',
        OUTPUT_FILE   => 'path/to/output.bam',
        # If 0, do not use multithreading, faster but can use more memory.
        # If > 0, tells how many cpu to use for samtools or just to use multiple cpus for picard
        USE_THREADING => 2,

        # Path to MergeSamFiles.jar
        PICARD_LIB    => 'picard.jar',
        # Use this default options for Picard: 'MAX_RECORDS_IN_RAM=20000000 CREATE_INDEX=true SORT_ORDER=coordinate ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT'
        # You will need to change the options if you want to use samtools for merging
        OPTIONS       => 'MAX_RECORDS_IN_RAM=20000000 CREATE_INDEX=true SORT_ORDER=coordinate ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT',
        SAMTOOLS      => 'samtools',
        INPUT_FILES   => [],
        },
    }
);

sub import {
  my ($callpack) = caller(0);    # Name of the calling package
  my $pack = shift;              # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys(%Config);
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join( ' ', map { '$' . $_ } @vars ) . ")";
  die $@ if $@;

  foreach (@vars) {
    if ( defined $Config{$_} ) {
      no strict 'refs';
      # Exporter does a similar job to the following
      # statement, but for function names, not
      # scalar variables:
      *{"${callpack}::$_"} = \$Config{$_};
    } else {
      die "Error: Config: $_ not known\n";
    }
  }
} ## end sub import

1;
