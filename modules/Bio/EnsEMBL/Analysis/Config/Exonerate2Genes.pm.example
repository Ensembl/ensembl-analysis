=head1 NAME

    Bio::EnsEMBL::Analysis::Config::Exonerate2Genes

=head1 SYNOPSIS

    use Bio::EnsEMBL::Analysis::Config::Exonerate2Genes;

=head1 DESCRIPTION

    It imports and sets a number of standard global variables into the
    calling package, which are used in many scripts in the human sequence
    analysis system. The variables are first declared using "use vars", so
    that it can be used when "use strict" is in use in the calling script.
    Without arguments all the standard variables are set, and with a list,
    only those variables whose names are provided are set. The module will
    die if a variable which doesn't appear in its C<%Exonerate> hash is
    asked to be set.

    Since The RunnableDB that this config controls can be used for
    inferring transcript structures from (different sets of) EST,
    cDNA and proteins, and several uses may be required in the same
    pipeline, this Config contains one primary config variable,
    EXONERATE_TRANSCRIPT_CONFIG. This is hash keyed off logic name,
    each entry of which is a hash containing the variable that affect
    the behaviour of the RunnableDB. When the RunnableDB instance is
    created, the correct entry is identified by logic name and value for a
    corresponding set of local variables are set.

=head1 LICENSE


# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2022] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 CONTACT

    Please email comments or questions to the public Ensembl
    developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.

    Questions may also be sent to the Ensembl help desk at
    <http://www.ensembl.org/Help/Contact>.

=cut


package Bio::EnsEMBL::Analysis::Config::Exonerate2Genes;

use strict;
use vars qw( %Config );

# Hash containing config info
%Config = (
  EXONERATE_CONFIG_BY_LOGIC => {
      DEFAULT => {

        # The GENOMICSEQS can be a file (string, A.), a
        # directory with files (string, B.) or an anonymous
        # array containing the names of multiple directories
        # (array of strings, C.). In the latter case the order
        # of appearance will determine the usage of directories
        # and files; new versions should therefore be listed in
        # the first directory.
        #
        # If using Exonerate2GenesRegion.pm, you don't need to 
        # specify anything as the genomic sequence
        # corresponding to the slice name in the input id will 
        # be retrieved from the pipeline/ref db.
        #
        # format: A. '/your/soft/masked/genome.fa'
        #      or B. '/your/soft/masked/genomeDIR'
        #      or C. ['/your/soft/masked/genomeDIR_1', '/your/soft/masked/genomeDIR_2']
        #      or D. Isn't read if using Exonerate2GenesRegion.pm, which will get seq from ref/pipeline db
        GENOMICSEQS         => '/your/soft/masked/genome.fa',

        QUERYTYPE           => undef,
        QUERYSEQS           => undef,
        QUERYANNOTATION     => undef,

        # If your query sequences have not been checked against the 
        # Ensembl kill_list,  bad sequences (e.g. chimeric cDNAs) might be
        # present in the query file. You can exclude the bad sequences from 
        # analysis by setting USE_KILL_LIST to "1" and specifying the
        # molecular type of the queries to be killed ("cDNA" or "protein").
        # A kill_list check will be done for the specified molecular type 
        # before Exonerate is run.  
        
        USE_KILL_LIST       => 0,
        KILL_TYPE           => undef,    # only "cDNA", "EST" or "protein" accepted here.
        
        IIDREGEXP           => undef,
        OUTDB               => undef,
        FILTER              => undef,
        COVERAGE_BY_ALIGNED => undef,
        OPTIONS             => undef,

        # Comment out or set to undef if non-reference regions (eg DR52
        # in human) should NOT be fetched, ie should be ignored:
        NONREF_REGIONS => 1,

        # If program not defined, will look in program_file of analysis
        # table. Or will take default 0.8.3 if neither is defined.
        PROGRAM => undef,    # /usr/local/ensembl/bin/exonerate

        #For use with Exonerate2GenesRegion 
        #For specifying query seq index, such as indicate index
        #indicate -d /dir/containing/seq -f seq_file_name 
        #-i /path/to/dir/containing/index -p singleWordParser
        #Note: if QUERYSEQS is defined and it is a directory containing a 
        #file whose name matches the second half of the input ID (after ::), 
        #it will use that file, not the specified index
        SEQFETCHER_OBJECT     => 'Bio::EnsEMBL::Analysis::Tools::SeqFetcher::OBDAIndexSeqFetcher',
        SEQFETCHER_PARAMS     => {
          -db => ['/path/to/dir/containing/index/'],
        },
        #Which repeats to use for softmasking if getting genomic seq from db
        SOFT_MASKED_REPEATS   => ['repeatmask','dust'],

      },

      EST_logicname => {

        # GENOMICSEQS obtained from DEFAULT
        # IIDREGEXP not set; input ids are file names

        QUERYTYPE => 'dna',
        QUERYSEQS => '/directory/with/EST/chunks',

        # As of 17 Jun 2010, there are no killed ESTs in the kill_list DB.
        # Therefore it's not necessary to do the kill_list check unless
        # new EST entries will be added to the kill_list DB.
        USE_KILL_LIST => 0,
        KILL_TYPE => undef,  # set this to "EST" if "USE_KILL_LIST" is set to 1

        # CHANGE! You can now either submit all db-connection parameters
        # for OUTDB (old method ) - or you can just supply a string. The string
        # must be assigned to a database-connection in Databases.pm
        OUTDB => "ESTCDNA_DB",    # HASH-key out of Databases.pm

        FILTER => {
          OBJECT => 'Bio::EnsEMBL::Analysis::Tools::ExonerateTranscriptFilter',
          PARAMETERS => { -coverage                 => 90,
                          -percent_id               => 97,
                          -best_in_genome           => 1,
                          -reject_processed_pseudos => 1,
          },
        },

        COVERAGE_BY_ALIGNED => 1,
        OPTIONS             => "--model est2genome --forwardcoordinates FALSE "
          . "--softmasktarget TRUE --exhaustive FALSE --score 500 "
          . "--saturatethreshold 100 --dnahspthreshold 60 --dnawordlen 14",
      },

      CDNA_logic_name => {

        # GENOMICSEQS obtained from DEFAULT
        # IIDREGEXP not set; input ids are file names

        QUERYTYPE => 'dna',
        QUERYSEQS => '/directory/with/cdna/chunks',
        USE_KILL_LIST => 0,
        KILL_TYPE => undef,  # set this to "cDNA" if USE_KILL_LIST is set to 1

        OUTDB => "ESTCDNA_DB",

        COVERAGE_BY_ALIGNED => 1,
        FILTER              => {
          OBJECT => 'Bio::EnsEMBL::Analysis::Tools::ExonerateTranscriptFilter',
          PARAMETERS => { -coverage                 => 90,
                          -percent_id               => 97,
                          -best_in_genome           => 1,
                          -reject_processed_pseudos => 1,
          },
        },

        OPTIONS => "--model est2genome --forwardcoordinates FALSE "
                . "--softmasktarget TRUE --exhaustive FALSE  --score 500 "
                . "--saturatethreshold 100 --dnahspthreshold 60 --dnawordlen 14",
      },

      Protein_logicname => {
        # GENOMICSEQS obtained from DEFAULT

        QUERYTYPE => 'protein',

        # QUERYSEQ can be a directory as well
        QUERYSEQS => '/file/containing/all/proteins.fa',

        USE_KILL_LIST => 0,
        KILL_TYPE => undef,  # set this to "protein" if USE_KILL_LIST is set to 1

        # Input id is a chunk id and chunk total
        IIDREGEXP => '(\d+):(\d+)',

        OUTDB     => "EXONERATE_DB",

        # FILTER not set, so no filtering done
        COVERAGE_BY_ALIGNED => 0,

        OPTIONS => "--model protein2genome --forwardcoordinates FALSE "
                . "--softmasktarget TRUE --exhaustive FALSE  --bestn 1",
      },

      orthologue_recovery => {
              QUERYTYPE => 'protein',
              QUERYSEQS => "/path/to/where/you/want/your/seq/dumped/by/OrthologueAnalyis",
              IIDREGEXP => '(\d+):(\d+)',
              OUTDB     => "EXONERATE_DB",
              COVERAGE_BY_ALIGNED => 0,
              OPTIONS => "--model protein2genome --forwardcoordinates FALSE "
                        . " --softmasktarget TRUE --exhaustive FALSE  --bestn 1",
      },
    }
);

sub import {
  my ($callpack) = caller(0);    # Name of the calling package
  my $pack = shift;              # Need to move package off @_

  # Get list of variables supplied, or else everything
  my @vars = @_ ? @_ : keys(%Config);
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join( ' ', map { '$' . $_ } @vars ) . ")";
  die $@ if $@;

  foreach (@vars) {
    if ( defined $Config{$_} ) {
      no strict 'refs';
      # Exporter does a similar job to the following
      # statement, but for function names, not
      # scalar variables:
      *{"${callpack}::$_"} = \$Config{$_};
    } else {
      die "Error: Config: $_ not known\n";
    }
  }
} ## end sub import

1;
